{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/image/java-EnumMap/java-EnumMap01.png","path":"image/java-EnumMap/java-EnumMap01.png","modified":0,"renderable":0},{"_id":"source/image/java-WeakHashMap/map01.png","path":"image/java-WeakHashMap/map01.png","modified":0,"renderable":0},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/image/java-EnumMap/java-EnumMap02.png","path":"image/java-EnumMap/java-EnumMap02.png","modified":0,"renderable":0},{"_id":"source/image/java-IdentityHashmap/java-IdentityHashmap01.png","path":"image/java-IdentityHashmap/java-IdentityHashmap01.png","modified":0,"renderable":0},{"_id":"source/image/java-WeakHashMap/map02.png","path":"image/java-WeakHashMap/map02.png","modified":0,"renderable":0},{"_id":"themes/next/source/images/payway/alipay.jpg","path":"images/payway/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/payway/wechatpay.jpg","path":"images/payway/wechatpay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"source/image/java-IdentityHashmap/java-IdentityHashmap02.png","path":"image/java-IdentityHashmap/java-IdentityHashmap02.png","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1523245781429},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1523245781431},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1523245781430},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1523245781437},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1523245781439},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1523245781440},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1523245781441},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1523245781442},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1523245781443},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1523245781445},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1523245781444},{"_id":"themes/next/_config.yml","hash":"72a4d157c62d39cf0827064937c70b3de69b8d6f","modified":1523779376937},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1523245781447},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1523245781449},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1523245781450},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1523245781559},{"_id":"source/about/index.md","hash":"2a09ddc7b81e3081cad4f7577d371a81f0444d8f","modified":1523754327816},{"_id":"source/_posts/java-EnumMap.md","hash":"fa4c2bf9ff78e3e840d30d42f3e4f324d13a25ce","modified":1525494256191},{"_id":"source/_posts/java-IdentityHashmap.md","hash":"e9160992c58afd21fa6ef25c32402aa09da3f51c","modified":1525165924138},{"_id":"source/categories/index.md","hash":"b10826c80365903af8ad9c3a560101444789476a","modified":1523674492618},{"_id":"source/_posts/java-WeakHashMap.md","hash":"06f6e7d76817ed02e16c416c11b6efa430586393","modified":1525515604935},{"_id":"source/_posts/java-stateMachine.md","hash":"62d7a89ae9de4393e1d9aa0ffcc3475c01194608","modified":1525070864658},{"_id":"source/tags/index.md","hash":"77a1e4167b9d70b4bbe9b7d1409eacfc2f33b187","modified":1523674166602},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b1ec000babd42bb7ffd26f5ad8aac9b5bec79ae5","modified":1523245781434},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1523245781433},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1523245781435},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1523245781436},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1523245781452},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1523245781453},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1523245781454},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1523245781456},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1523245781455},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1523245781457},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1523245781460},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1523245781459},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1523245781461},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1523245781463},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1523245781462},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1523245781465},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1523342770234},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1523245781466},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1523245781469},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1523245781468},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1523245781559},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1523245781559},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1523245781473},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1523245781549},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1523245781549},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1523245781549},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1523245781549},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1523245781559},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1523245781559},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1523245781559},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1523245781891},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1523245781892},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1523245781892},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523245781722},{"_id":"source/image/java-EnumMap/java-EnumMap01.png","hash":"c3d38f11e385c477a2c800988fcb30097a609062","modified":1523680498865},{"_id":"source/image/java-WeakHashMap/map01.png","hash":"59c8f06572c683e7a9b81b2643d56791e4971051","modified":1525512442519},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1523245781472},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1523245781471},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1523245781569},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1523245781569},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1523245781559},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1523245781569},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1523245781569},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1523245781569},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1523245781569},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1523245781569},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1523245781569},{"_id":"themes/next/layout/_macro/my-copyright.swig","hash":"7b2710bf55b7961dd9a39c0f6e0c847e0bd3e381","modified":1523688892962},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"f29b50d83bcdc9e70696b6a8a8917d8b2ad4be10","modified":1523688722318},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1523245781475},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1523245781476},{"_id":"themes/next/layout/_macro/post.swig","hash":"c80caed88b110640e280b70ca4503a1ddd15f7e1","modified":1523688958668},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1523245781479},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1523245781481},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1523245781480},{"_id":"themes/next/layout/_partials/footer.swig","hash":"5ce60c9dde042bac0c393fa37c830cf2dd29ea68","modified":1523757509061},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1523245781482},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1523245781490},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1523245781488},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1523245781485},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1523245781491},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1523245781492},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1523245781503},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1523245781504},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1523245781511},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1523245781539},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1523245781539},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1523245781538},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1523245781539},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1523245781539},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1523245781539},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1523245781539},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1523245781724},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1523245781721},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1523245781723},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1523245781725},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1523245781728},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1523245781727},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1523245781729},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1523245781730},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1523245781731},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1523245781732},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1523245781735},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1523245781734},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1523245781736},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1523245781737},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1523245781738},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1523245781739},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1523245781740},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1523245781740},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1523245781740},{"_id":"source/image/java-EnumMap/java-EnumMap02.png","hash":"41e635f80c1200c2fd80cba63bff21c70f2a743c","modified":1523681320778},{"_id":"source/image/java-IdentityHashmap/java-IdentityHashmap01.png","hash":"70ed04e305d830dfa6dfa9bf795be90a7bb2aa37","modified":1525070864662},{"_id":"source/image/java-WeakHashMap/map02.png","hash":"b64ea73d5d78aea3aabf58aba53946a927ddcc79","modified":1525512483999},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523245781508},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523245781509},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523245781671},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523245781671},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523245781681},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523245781716},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523245781719},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1523245781486},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1523245781487},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1523245781494},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1523245781495},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1523245781496},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1523245781498},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1523245781500},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1523245781499},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1523245781501},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1523245781505},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1523245781507},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1523245781514},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1523245781513},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1523245781510},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1523245781515},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1523245781516},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1523245781517},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1523245781520},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1523245781519},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1523245781521},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1523245781522},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1523245781523},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1523245781525},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1523245781524},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1523245781526},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1523245781528},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1523245781530},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1523245781529},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1523245781531},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1523245781532},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1523245781533},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1523245781534},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1523245781535},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1523245781537},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1523245781549},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1523245781549},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1523245781549},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1523245781671},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1523245781549},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1523245781671},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1523245781671},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1523245781671},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1523245781714},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1523245781715},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1523245781717},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1523245781719},{"_id":"themes/next/source/images/payway/alipay.jpg","hash":"fe3c33a8e3c185d62d89e64b5ca50eb6b769290e","modified":1523778656612},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1523245781740},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1523245781740},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1523245781740},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1523245781740},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1523245781750},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1523245781750},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1523245781750},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1523245781750},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1523245781750},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1523245781750},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1523245781770},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1523245781770},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1523245781750},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1523245781780},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1523245781780},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1523245781780},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1523245781810},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1523245781810},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1523245781810},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1523245781810},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1523245781810},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1523245781800},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1523245781800},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1523245781840},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1523245781800},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1523245781800},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1523245781840},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1523245781840},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1523245781840},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1523245781840},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1523245781840},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1523245781850},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1523245781840},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1523245781850},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1523245781830},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1523245781850},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1523245781850},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1523245781850},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1523245781850},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1523245781850},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1523245781860},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1523245781863},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1523245781862},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1523245781860},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1523245781865},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1523245781864},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1523245781866},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1523245781868},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1523245781867},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1523245781870},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1523245781871},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1523245781872},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1523245781883},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1523245781882},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1523245781887},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1523245781888},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1523245781889},{"_id":"themes/next/source/images/payway/wechatpay.jpg","hash":"b741074ddafaf0d7c8c81921f28cc01b794b77b3","modified":1523777203103},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1523245781830},{"_id":"source/image/java-IdentityHashmap/java-IdentityHashmap02.png","hash":"3ff625998bfdd4024979c06e0a25ac1cfb45b94b","modified":1525070864666},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1523245781539},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1523245781539},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1523245781681},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1523245781681},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1523245781681},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1523245781681},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1523245781681},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1523245781681},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1523245781691},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1523245781692},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1523245781698},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1523245781699},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1523245781700},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1523245781703},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1523245781702},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1523245781707},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1523245781708},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1523245781709},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1523245781712},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1523245781710},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1523245781713},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1523245781661},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1523245781579},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1523245781579},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1523245781579},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1523245781579},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1523245781579},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1523245781606},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1523245781631},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1523245781661},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1523245781661},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1523245781661},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1523245781671},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1523245781671},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1523245781671},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1523245781750},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1523245781760},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1523245781770},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1523245781770},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1523245781780},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1523245781780},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1523245781780},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1523245781780},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1523245781790},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1523245781790},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1523245781800},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1523245781800},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1523245781800},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1523245781820},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1523245781810},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1523245781820},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1523245781800},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1523245781810},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1523245781879},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1523245781881},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1523245781770},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1523245781830},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1523245781830},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1523245781885},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1523245781695},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1523245781696},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1523245781705},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1523245781579},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1523245781590},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1523245781591},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1523245781594},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1523245781595},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1523245781601},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1523245781602},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1523245781592},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1523245781603},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1523245781604},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1523245781605},{"_id":"themes/next/source/css/_common/components/post/my-post-copyright.styl","hash":"1a510f995e665b28d85ba4d169b824276c40e4f3","modified":1523688937551},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1523245781609},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1523245781608},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1523245781611},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1523245781611},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1523245781611},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1523245781611},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1523245781611},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1523245781611},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1523245781611},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1523245781611},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1523245781611},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1523245781621},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1523245781621},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1523245781621},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1523245781598},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"90d78b7270739eaab5b054226b684631a319011a","modified":1523689046526},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1523245781597},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1523245781599},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1523245781621},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1523245781631},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1523245781621},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1523245781621},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1523245781631},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1523245781631},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1523245781631},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1523245781631},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1523245781631},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1523245781631},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1523245781641},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1523245781641},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1523245781641},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1523245781641},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1523245781641},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1523245781641},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1523245781641},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1523245781652},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1523245781651},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1523245781656},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1523245781654},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1523245781655},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1523245781657},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1523245781659},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1523245781660},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1523245781661},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1523245781661},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1523245781661},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1523245781661},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1523245781760},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1523245781760},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1523245781760},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1523245781760},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1523245781760},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1523245781790},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1523245781790},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1523245781790},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1523245781790},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1523245781790},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1523245781790},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1523245781820},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1523245781820},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1523245781830},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1523245781770},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1523245781877},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1523245781830},{"_id":"public/about/index.html","hash":"8da4ca2a91ee21fe878ad37f2b54da1af90fce10","modified":1525514092184},{"_id":"public/categories/index.html","hash":"cf47cdbf023a28e78e22206f385a183f594cd47d","modified":1525514092184},{"_id":"public/tags/index.html","hash":"3487933aafc34419b84425c812f3cf701db82643","modified":1525514092185},{"_id":"public/archives/index.html","hash":"7a72b138bbad974c0a4f36a5a7c1d074dee95b4e","modified":1525514092185},{"_id":"public/archives/2018/index.html","hash":"2a7864f56a8998b16001003f74c3d0e8de795699","modified":1525514092185},{"_id":"public/archives/2018/04/index.html","hash":"6e3df5917eabea5238d1b58ab9794c7302cd0ee0","modified":1525514092185},{"_id":"public/tags/java/index.html","hash":"2b721ecfd3e6f968ed2a5a9efb0726f98614b484","modified":1525514092185},{"_id":"public/categories/java/index.html","hash":"14ff124be4af017dd2f83d0588dd5e653d4b2a7f","modified":1525514092185},{"_id":"public/2018/04/30/java-IdentityHashmap/index.html","hash":"febd15162af796c30c1729fbb2fad45793f49dd4","modified":1525514092185},{"_id":"public/2018/04/22/java-stateMachine/index.html","hash":"6b9c5cd08fcaa226ca08e21faa973fdbdd780e35","modified":1525514092185},{"_id":"public/2018/04/19/java-EnumMap/index.html","hash":"57c7f29ec00699299ebdb8b7d3357c1b303423f4","modified":1525514092185},{"_id":"public/index.html","hash":"1bea99ba74377229e5b52d27a260360f80ea6e8f","modified":1525514092185},{"_id":"public/archives/2018/05/index.html","hash":"304a92ab74c73102ca4f2fc2e1dd5f0891bba22a","modified":1525514092189},{"_id":"public/2018/05/05/java-WeakHashMap/index.html","hash":"8d80b841b5d5590e89a1909cd80ca5385bdf27e1","modified":1525515612458},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1525514092191},{"_id":"public/image/java-EnumMap/java-EnumMap01.png","hash":"c3d38f11e385c477a2c800988fcb30097a609062","modified":1525514092191},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1525514092191},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1525514092191},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1525514092192},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1525514092192},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1525514092192},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1525514092192},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1525514092192},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1525514092192},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1525514092192},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1525514092192},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1525514092192},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1525514092192},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1525514092192},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1525514092192},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1525514092192},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1525514092192},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1525514092192},{"_id":"public/images/payway/alipay.jpg","hash":"fe3c33a8e3c185d62d89e64b5ca50eb6b769290e","modified":1525514092192},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1525514092192},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1525514092192},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1525514092192},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1525514092192},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1525514092192},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1525514092192},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1525514092192},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1525514092192},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1525514092193},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1525514092193},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1525514092193},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1525514092193},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1525514092193},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1525514092193},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1525514092193},{"_id":"public/image/java-WeakHashMap/map01.png","hash":"59c8f06572c683e7a9b81b2643d56791e4971051","modified":1525514092193},{"_id":"public/image/java-EnumMap/java-EnumMap02.png","hash":"41e635f80c1200c2fd80cba63bff21c70f2a743c","modified":1525514092604},{"_id":"public/image/java-IdentityHashmap/java-IdentityHashmap01.png","hash":"70ed04e305d830dfa6dfa9bf795be90a7bb2aa37","modified":1525514092605},{"_id":"public/images/payway/wechatpay.jpg","hash":"b741074ddafaf0d7c8c81921f28cc01b794b77b3","modified":1525514092612},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1525514092612},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1525514092612},{"_id":"public/image/java-WeakHashMap/map02.png","hash":"b64ea73d5d78aea3aabf58aba53946a927ddcc79","modified":1525514092612},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1525514092615},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1525514092615},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1525514092615},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1525514092615},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1525514092615},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1525514092615},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1525514092615},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1525514092615},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1525514092615},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1525514092615},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1525514092615},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1525514092615},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1525514092616},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1525514092616},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1525514092616},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1525514092616},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1525514092616},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1525514092616},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1525514092616},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1525514092616},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1525514092616},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1525514092616},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1525514092616},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1525514092616},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1525514092616},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1525514092616},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1525514092616},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1525514092616},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1525514092616},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1525514092616},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1525514092616},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1525514092616},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1525514092616},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1525514092616},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1525514092616},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1525514092616},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1525514092616},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1525514092616},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1525514092616},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1525514092617},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1525514092617},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1525514092617},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1525514092617},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1525514092617},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1525514092617},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1525514092617},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1525514092617},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1525514092617},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1525514092617},{"_id":"public/css/main.css","hash":"a97857d94b5ac16a86368b2ff80238c7e8812770","modified":1525514092617},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1525514092617},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1525514092617},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1525514092617},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1525514092617},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1525514092617},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1525514092617},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1525514092617},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1525514092617},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1525514092617},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1525514092618},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1525514092618},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1525514092618},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1525514092618},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1525514092618},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1525514092618},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1525514092618},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1525514092618},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1525514092618},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1525514092618},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1525514092618},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1525514092618},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1525514092618},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1525514092618},{"_id":"public/image/java-IdentityHashmap/java-IdentityHashmap02.png","hash":"3ff625998bfdd4024979c06e0a25ac1cfb45b94b","modified":1525514092623},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1525514092672}],"Category":[{"name":"java","_id":"cjgt7pa2r0004lctycetcw6ws"}],"Data":[],"Page":[{"title":"关于我","date":"2018-04-14T03:46:20.000Z","type":"about","_content":"\n### About\n> 博主现在是一名大四学生，现是北京某互联网金融公司一名服务端开发实习生，主要从事支付相关业务的开发。搭建此博客的目的主要是想和大家一起分享自己的一些收获，本人现在是小白一个，文章如有不正之处，还望各位大神多多指教。\n> 微博:Xander·Xu\n\n### Education\n\n> 2014 - 2018, 青岛科技大学, 本科, 物联网工程\n\n\n### Work Experience\n\n> 借贷宝 (2018年2月 - 至今) \n  服务端研发实习 \n  支付应用研发部 \n   \n> 青岛孔雀网络科技有限公司(2017年4月 - 2017年10月)\n  服务端研发实习\n  孔雀云平台   \n  \n\n### Gmail\n> xuxiaofei4519@gmail.com\n\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2018-04-14 11:46:20\ntype: \"about\"\n---\n\n### About\n> 博主现在是一名大四学生，现是北京某互联网金融公司一名服务端开发实习生，主要从事支付相关业务的开发。搭建此博客的目的主要是想和大家一起分享自己的一些收获，本人现在是小白一个，文章如有不正之处，还望各位大神多多指教。\n> 微博:Xander·Xu\n\n### Education\n\n> 2014 - 2018, 青岛科技大学, 本科, 物联网工程\n\n\n### Work Experience\n\n> 借贷宝 (2018年2月 - 至今) \n  服务端研发实习 \n  支付应用研发部 \n   \n> 青岛孔雀网络科技有限公司(2017年4月 - 2017年10月)\n  服务端研发实习\n  孔雀云平台   \n  \n\n### Gmail\n> xuxiaofei4519@gmail.com\n\n\n","updated":"2018-04-15T01:05:27.816Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjgt7pa2k0000lcty5enmbv2j","content":"<h3 id=\"About\"><a href=\"#About\" class=\"headerlink\" title=\"About\"></a>About</h3><blockquote>\n<p>博主现在是一名大四学生，现是北京某互联网金融公司一名服务端开发实习生，主要从事支付相关业务的开发。搭建此博客的目的主要是想和大家一起分享自己的一些收获，本人现在是小白一个，文章如有不正之处，还望各位大神多多指教。<br>微博:Xander·Xu</p>\n</blockquote>\n<h3 id=\"Education\"><a href=\"#Education\" class=\"headerlink\" title=\"Education\"></a>Education</h3><blockquote>\n<p>2014 - 2018, 青岛科技大学, 本科, 物联网工程</p>\n</blockquote>\n<h3 id=\"Work-Experience\"><a href=\"#Work-Experience\" class=\"headerlink\" title=\"Work Experience\"></a>Work Experience</h3><blockquote>\n<p>借贷宝 (2018年2月 - 至今)<br>  服务端研发实习<br>  支付应用研发部 </p>\n</blockquote>\n<blockquote>\n<p>青岛孔雀网络科技有限公司(2017年4月 - 2017年10月)<br>  服务端研发实习<br>  孔雀云平台   </p>\n</blockquote>\n<h3 id=\"Gmail\"><a href=\"#Gmail\" class=\"headerlink\" title=\"Gmail\"></a>Gmail</h3><blockquote>\n<p><a href=\"mailto:xuxiaofei4519@gmail.com\" target=\"_blank\" rel=\"noopener\">xuxiaofei4519@gmail.com</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"About\"><a href=\"#About\" class=\"headerlink\" title=\"About\"></a>About</h3><blockquote>\n<p>博主现在是一名大四学生，现是北京某互联网金融公司一名服务端开发实习生，主要从事支付相关业务的开发。搭建此博客的目的主要是想和大家一起分享自己的一些收获，本人现在是小白一个，文章如有不正之处，还望各位大神多多指教。<br>微博:Xander·Xu</p>\n</blockquote>\n<h3 id=\"Education\"><a href=\"#Education\" class=\"headerlink\" title=\"Education\"></a>Education</h3><blockquote>\n<p>2014 - 2018, 青岛科技大学, 本科, 物联网工程</p>\n</blockquote>\n<h3 id=\"Work-Experience\"><a href=\"#Work-Experience\" class=\"headerlink\" title=\"Work Experience\"></a>Work Experience</h3><blockquote>\n<p>借贷宝 (2018年2月 - 至今)<br>  服务端研发实习<br>  支付应用研发部 </p>\n</blockquote>\n<blockquote>\n<p>青岛孔雀网络科技有限公司(2017年4月 - 2017年10月)<br>  服务端研发实习<br>  孔雀云平台   </p>\n</blockquote>\n<h3 id=\"Gmail\"><a href=\"#Gmail\" class=\"headerlink\" title=\"Gmail\"></a>Gmail</h3><blockquote>\n<p><a href=\"mailto:xuxiaofei4519@gmail.com\" target=\"_blank\" rel=\"noopener\">xuxiaofei4519@gmail.com</a></p>\n</blockquote>\n"},{"title":"分类","date":"2018-04-14T02:53:49.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-04-14 10:53:49\ntype: \"categories\"\n---\n","updated":"2018-04-14T02:54:52.618Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjgt7pa2o0002lctyti7g512f","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-04-14T02:46:38.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-04-14 10:46:38\ntype: \"tags\"\n---\n","updated":"2018-04-14T02:49:26.602Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjgt7pa2s0006lctyuioss0fn","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"EnumMap浅析","date":"2018-04-19T06:40:09.000Z","copyright":true,"_content":"\n{% cq %} \n前段时间学习spring、tomcat的源码非常吃力，发现很多东西都是因为自己的Java基础不够牢固,\n因此搭建了此博客开始重点关注java基础的相关知识。这篇文章主要分析自己很少使用的EnumMap。\n{% endcq %}\n\n<!-- more -->\n\n### EnumMap的继承类与实现接口\n\n![截图](/image/java-EnumMap/java-EnumMap01.png)\n\n\n### EnumMap内部的方法\n![截图](/image/java-EnumMap/java-EnumMap02.png)\n\n\n### 类定义\n{% codeblock lang:java %}\npublic class EnumMap<K extends Enum<K>, V> extends AbstractMap<K, V> implements java.io.Serializable, Cloneable{\n    private final Class<K> keyType;\n    private transient K[] keyUniverse;\n    private transient Object[] vals;\n    private transient int size = 0;\n}\n{% endcodeblock %}\n\n以上成员变量含义:keyType表示类型信息，keyUniverse表示键，是所有可能的枚举值，vals表示键对应的值，size表示键值对个数。\n\n\n\n### 构造方法\n\n\n{% codeblock lang:java %}\n/**\n * 通过枚举的Class类型构造\n */\npublic EnumMap(Class<K> keyType) {\n    this.keyType = keyType;\n    keyUniverse = getKeyUniverse(keyType);\n    vals = new Object[keyUniverse.length];\n}\n\n/**\n * 通过EnumMap构造\n */\npublic EnumMap(EnumMap<K, ? extends V> m) {\n     keyType = m.keyType;\n     keyUniverse = m.keyUniverse;\n     vals = m.vals.clone();\n     size = m.size;\n}\n\n/**\n * 通过Map构造,必须保证key的类型是枚举类型\n */\npublic EnumMap(Map<K, ? extends V> m) {\n    if (m instanceof EnumMap) {\n        EnumMap<K, ? extends V> em = (EnumMap<K, ? extends V>) m;\n        keyType = em.keyType;\n        keyUniverse = em.keyUniverse;\n        vals = em.vals.clone();\n        size = em.size;\n    } else {\n        if (m.isEmpty())\n            throw new IllegalArgumentException(\"Specified map is empty\");\n        keyType = m.keySet().iterator().next().getDeclaringClass();\n        keyUniverse = getKeyUniverse(keyType);\n        vals = new Object[keyUniverse.length];\n        putAll(m);\n    }\n}\n{% endcodeblock %}\n\n\n### put方法解析\n{% codeblock lang:java %}\npublic V put(K key, V value) {\n    typeCheck(key);\n    int index = key.ordinal();\n    Object oldValue = vals[index];\n    vals[index] = maskNull(value);\n    if (oldValue == null)\n        size++;\n    return unmaskNull(oldValue);\n}\n\nprivate void typeCheck(K key) {\n    Class keyClass = key.getClass();\n    if (keyClass != keyType && keyClass.getSuperclass() != keyType)\n        throw new ClassCastException(keyClass + \" != \" + keyType);\n}\n\n\nprivate Object maskNull(Object value) {\n    return (value == null ? NULL : value);\n}\n\nprivate V unmaskNull(Object value) {\n    return (V) (value == NULL ? null : value);\n}\n\nprivate static final Object NULL = new Object() {\n    public int hashCode() {\n        return 0;\n    }\n    public String toString() {\n        return \"java.util.EnumMap.NULL\";\n    }\n};\n\n{% endcodeblock %}\n\n\n- typeCheck方法校验传入key的类型是否与EnumMap初始化时定义的枚举类型对应(包含子类)\n- EnumMap允许value为null，为了区别null值与没有值，EnumMap将null值包装成了一个特殊的NULL对象，\n  有两个辅助方法用于null的打包和解包，打包方法为maskNull，解包方法为unmaskNull。\n- ordinal()方法是获取key在枚举类中的顺序(索引),将该索引作为往vals数组存放value的索引\n- 当put相同的key不同value的时候.会重新将旧value覆盖，然后将value值置空。\n\n\n\n### get方法解析\n{% codeblock lang:java %}\npublic V get(Object key) {\n    return (isValidKey(key) ?\n            unmaskNull(vals[((Enum)key).ordinal()]) : null);\n}\n\nprivate boolean isValidKey(Object key) {\n    if (key == null)\n        return false;\n    // Cheaper than instanceof Enum followed by getDeclaringClass\n    Class keyClass = key.getClass();\n    return keyClass == keyType || keyClass.getSuperclass() == keyType;\n}\n\n{% endcodeblock %}\n\n\n- 从上面代码可以看出，key通过数组下标映射数据，因此get数据的时候速度效率非常高。\n\n### remove方法解析\n\n{% codeblock lang:java %}\npublic V remove(Object key) {\n    if (!isValidKey(key))\n        return null;\n    int index = ((Enum<?>)key).ordinal();\n    Object oldValue = vals[index];\n    vals[index] = null;\n    if (oldValue != null)\n        size--;\n    return unmaskNull(oldValue);\n}\n{% endcodeblock %}\n\n- 从上面代码可以看出,删除元素之前先对key进行验证，如果key不是map初始化时指定的枚举类型，那么将会返回null。\n- 当验证完key之后，再用该key在枚举类中的顺序号作为寻找value的下标，通过该下标将val数组中的值置空。如果value不为null的话，map的size就减1。\n- 最终将卸载NULL对象，返回删除的value。在remove操作中是不会删除key数组(keyUniverse[])中的任何元素。keyUniverse[]在类构造阶段已经初始化完毕，一直伴随着map的整个生命周期，直到该EnumMap被卸载。\n- 这里有一个问题需要注意，从代码中我们没有看到任何关于线程安全的代码，因此就会产生ABA的问题。当多线程环境下，很有可能发生当我们删除一个key的value时，value置空了，但是size--没有执行，这时候又有一个线程对相同的key进行put操作,我们获取的size大小就有可能不变,也有可能变大。产生脏读的情况。\n\n\n\n### 使用方法\n\n{% codeblock lang:java %}\nimport java.util.EnumMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        EnumMap<ResultEnum, String> map = new EnumMap<ResultEnum, String>(ResultEnum.class);\n        map.put(ResultEnum.SUCCESS,\"1\");\n        map.put(ResultEnum.SUCCESS,\"2\");\n        map.put(ResultEnum.FAIL,\"3\");\n        map.put(ResultEnum.DEALING,\"4\");\n        map.put(ResultEnum.UNKNOWN,\"5\");\n        System.out.println(map);\n    }\n}\n{% endcodeblock %}\n\n输出结果:\n{% codeblock lang:java %}\n{SUCCESS=2, FAIL=3, DEALING=4, UNKNOWN=5}\n{% endcodeblock %}\n\n\n###  使用场景\n状态机：根据老大的提示，周六在公司回顾EnumMap的时候，发现确实可以使用EmumMap作为状态机。状态机实现见:EnumMap状态机实现。\n\n分类场景：对于自己而言，更多的是数据分类场景，同一类的数据对应到同一个枚举，即枚举对应Map的形式。\n\n由于EnumMap并非线程安全，因此并不适合并发修改的场景。当然，也可以自定义将EnumMap封装成适用并发的Map类，这些都是后话了。\n  \n### 总结\n\n> 以上就是EnumMap的基本实现原理，内部有两个数组，长度相同，一个表示所有可能的键，一个表示对应的值，值为null表示没有该键值对，键都有一个对应的索引，根据索引可直接访问和操作其键和值，效率很高。\n  EnumMap的缺点就是并非是线程安全的，可以用工具类包装成现成安全的:Map<EnumKey, V> m = Collections.synchronizedMap(new EnumMap<EnumKey, V>();\n\n","source":"_posts/java-EnumMap.md","raw":"---\ntitle: EnumMap浅析\ndate: 2018-04-19 14:40:09\ncopyright: true\ntags:\n - java\ncategories:\n - java\n---\n\n{% cq %} \n前段时间学习spring、tomcat的源码非常吃力，发现很多东西都是因为自己的Java基础不够牢固,\n因此搭建了此博客开始重点关注java基础的相关知识。这篇文章主要分析自己很少使用的EnumMap。\n{% endcq %}\n\n<!-- more -->\n\n### EnumMap的继承类与实现接口\n\n![截图](/image/java-EnumMap/java-EnumMap01.png)\n\n\n### EnumMap内部的方法\n![截图](/image/java-EnumMap/java-EnumMap02.png)\n\n\n### 类定义\n{% codeblock lang:java %}\npublic class EnumMap<K extends Enum<K>, V> extends AbstractMap<K, V> implements java.io.Serializable, Cloneable{\n    private final Class<K> keyType;\n    private transient K[] keyUniverse;\n    private transient Object[] vals;\n    private transient int size = 0;\n}\n{% endcodeblock %}\n\n以上成员变量含义:keyType表示类型信息，keyUniverse表示键，是所有可能的枚举值，vals表示键对应的值，size表示键值对个数。\n\n\n\n### 构造方法\n\n\n{% codeblock lang:java %}\n/**\n * 通过枚举的Class类型构造\n */\npublic EnumMap(Class<K> keyType) {\n    this.keyType = keyType;\n    keyUniverse = getKeyUniverse(keyType);\n    vals = new Object[keyUniverse.length];\n}\n\n/**\n * 通过EnumMap构造\n */\npublic EnumMap(EnumMap<K, ? extends V> m) {\n     keyType = m.keyType;\n     keyUniverse = m.keyUniverse;\n     vals = m.vals.clone();\n     size = m.size;\n}\n\n/**\n * 通过Map构造,必须保证key的类型是枚举类型\n */\npublic EnumMap(Map<K, ? extends V> m) {\n    if (m instanceof EnumMap) {\n        EnumMap<K, ? extends V> em = (EnumMap<K, ? extends V>) m;\n        keyType = em.keyType;\n        keyUniverse = em.keyUniverse;\n        vals = em.vals.clone();\n        size = em.size;\n    } else {\n        if (m.isEmpty())\n            throw new IllegalArgumentException(\"Specified map is empty\");\n        keyType = m.keySet().iterator().next().getDeclaringClass();\n        keyUniverse = getKeyUniverse(keyType);\n        vals = new Object[keyUniverse.length];\n        putAll(m);\n    }\n}\n{% endcodeblock %}\n\n\n### put方法解析\n{% codeblock lang:java %}\npublic V put(K key, V value) {\n    typeCheck(key);\n    int index = key.ordinal();\n    Object oldValue = vals[index];\n    vals[index] = maskNull(value);\n    if (oldValue == null)\n        size++;\n    return unmaskNull(oldValue);\n}\n\nprivate void typeCheck(K key) {\n    Class keyClass = key.getClass();\n    if (keyClass != keyType && keyClass.getSuperclass() != keyType)\n        throw new ClassCastException(keyClass + \" != \" + keyType);\n}\n\n\nprivate Object maskNull(Object value) {\n    return (value == null ? NULL : value);\n}\n\nprivate V unmaskNull(Object value) {\n    return (V) (value == NULL ? null : value);\n}\n\nprivate static final Object NULL = new Object() {\n    public int hashCode() {\n        return 0;\n    }\n    public String toString() {\n        return \"java.util.EnumMap.NULL\";\n    }\n};\n\n{% endcodeblock %}\n\n\n- typeCheck方法校验传入key的类型是否与EnumMap初始化时定义的枚举类型对应(包含子类)\n- EnumMap允许value为null，为了区别null值与没有值，EnumMap将null值包装成了一个特殊的NULL对象，\n  有两个辅助方法用于null的打包和解包，打包方法为maskNull，解包方法为unmaskNull。\n- ordinal()方法是获取key在枚举类中的顺序(索引),将该索引作为往vals数组存放value的索引\n- 当put相同的key不同value的时候.会重新将旧value覆盖，然后将value值置空。\n\n\n\n### get方法解析\n{% codeblock lang:java %}\npublic V get(Object key) {\n    return (isValidKey(key) ?\n            unmaskNull(vals[((Enum)key).ordinal()]) : null);\n}\n\nprivate boolean isValidKey(Object key) {\n    if (key == null)\n        return false;\n    // Cheaper than instanceof Enum followed by getDeclaringClass\n    Class keyClass = key.getClass();\n    return keyClass == keyType || keyClass.getSuperclass() == keyType;\n}\n\n{% endcodeblock %}\n\n\n- 从上面代码可以看出，key通过数组下标映射数据，因此get数据的时候速度效率非常高。\n\n### remove方法解析\n\n{% codeblock lang:java %}\npublic V remove(Object key) {\n    if (!isValidKey(key))\n        return null;\n    int index = ((Enum<?>)key).ordinal();\n    Object oldValue = vals[index];\n    vals[index] = null;\n    if (oldValue != null)\n        size--;\n    return unmaskNull(oldValue);\n}\n{% endcodeblock %}\n\n- 从上面代码可以看出,删除元素之前先对key进行验证，如果key不是map初始化时指定的枚举类型，那么将会返回null。\n- 当验证完key之后，再用该key在枚举类中的顺序号作为寻找value的下标，通过该下标将val数组中的值置空。如果value不为null的话，map的size就减1。\n- 最终将卸载NULL对象，返回删除的value。在remove操作中是不会删除key数组(keyUniverse[])中的任何元素。keyUniverse[]在类构造阶段已经初始化完毕，一直伴随着map的整个生命周期，直到该EnumMap被卸载。\n- 这里有一个问题需要注意，从代码中我们没有看到任何关于线程安全的代码，因此就会产生ABA的问题。当多线程环境下，很有可能发生当我们删除一个key的value时，value置空了，但是size--没有执行，这时候又有一个线程对相同的key进行put操作,我们获取的size大小就有可能不变,也有可能变大。产生脏读的情况。\n\n\n\n### 使用方法\n\n{% codeblock lang:java %}\nimport java.util.EnumMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        EnumMap<ResultEnum, String> map = new EnumMap<ResultEnum, String>(ResultEnum.class);\n        map.put(ResultEnum.SUCCESS,\"1\");\n        map.put(ResultEnum.SUCCESS,\"2\");\n        map.put(ResultEnum.FAIL,\"3\");\n        map.put(ResultEnum.DEALING,\"4\");\n        map.put(ResultEnum.UNKNOWN,\"5\");\n        System.out.println(map);\n    }\n}\n{% endcodeblock %}\n\n输出结果:\n{% codeblock lang:java %}\n{SUCCESS=2, FAIL=3, DEALING=4, UNKNOWN=5}\n{% endcodeblock %}\n\n\n###  使用场景\n状态机：根据老大的提示，周六在公司回顾EnumMap的时候，发现确实可以使用EmumMap作为状态机。状态机实现见:EnumMap状态机实现。\n\n分类场景：对于自己而言，更多的是数据分类场景，同一类的数据对应到同一个枚举，即枚举对应Map的形式。\n\n由于EnumMap并非线程安全，因此并不适合并发修改的场景。当然，也可以自定义将EnumMap封装成适用并发的Map类，这些都是后话了。\n  \n### 总结\n\n> 以上就是EnumMap的基本实现原理，内部有两个数组，长度相同，一个表示所有可能的键，一个表示对应的值，值为null表示没有该键值对，键都有一个对应的索引，根据索引可直接访问和操作其键和值，效率很高。\n  EnumMap的缺点就是并非是线程安全的，可以用工具类包装成现成安全的:Map<EnumKey, V> m = Collections.synchronizedMap(new EnumMap<EnumKey, V>();\n\n","slug":"java-EnumMap","published":1,"updated":"2018-05-05T04:24:16.191Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgt7pa2l0001lctypxvzdvnd","content":"<blockquote class=\"blockquote-center\"><p>前段时间学习spring、tomcat的源码非常吃力，发现很多东西都是因为自己的Java基础不够牢固,<br>因此搭建了此博客开始重点关注java基础的相关知识。这篇文章主要分析自己很少使用的EnumMap。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"EnumMap的继承类与实现接口\"><a href=\"#EnumMap的继承类与实现接口\" class=\"headerlink\" title=\"EnumMap的继承类与实现接口\"></a>EnumMap的继承类与实现接口</h3><p><img src=\"/image/java-EnumMap/java-EnumMap01.png\" alt=\"截图\"></p>\n<h3 id=\"EnumMap内部的方法\"><a href=\"#EnumMap内部的方法\" class=\"headerlink\" title=\"EnumMap内部的方法\"></a>EnumMap内部的方法</h3><p><img src=\"/image/java-EnumMap/java-EnumMap02.png\" alt=\"截图\"></p>\n<h3 id=\"类定义\"><a href=\"#类定义\" class=\"headerlink\" title=\"类定义\"></a>类定义</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnumMap</span>&lt;<span class=\"title\">K</span> <span class=\"keyword\">extends</span> <span class=\"title\">Enum</span>&lt;<span class=\"title\">K</span>&gt;, <span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span>, <span class=\"title\">Cloneable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Class&lt;K&gt; keyType;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> K[] keyUniverse;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> Object[] vals;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上成员变量含义:keyType表示类型信息，keyUniverse表示键，是所有可能的枚举值，vals表示键对应的值，size表示键值对个数。</p>\n<h3 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过枚举的Class类型构造</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EnumMap</span><span class=\"params\">(Class&lt;K&gt; keyType)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.keyType = keyType;</span><br><span class=\"line\">    keyUniverse = getKeyUniverse(keyType);</span><br><span class=\"line\">    vals = <span class=\"keyword\">new</span> Object[keyUniverse.length];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过EnumMap构造</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EnumMap</span><span class=\"params\">(EnumMap&lt;K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class=\"line\">     keyType = m.keyType;</span><br><span class=\"line\">     keyUniverse = m.keyUniverse;</span><br><span class=\"line\">     vals = m.vals.clone();</span><br><span class=\"line\">     size = m.size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过Map构造,必须保证key的类型是枚举类型</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EnumMap</span><span class=\"params\">(Map&lt;K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m <span class=\"keyword\">instanceof</span> EnumMap) &#123;</span><br><span class=\"line\">        EnumMap&lt;K, ? extends V&gt; em = (EnumMap&lt;K, ? extends V&gt;) m;</span><br><span class=\"line\">        keyType = em.keyType;</span><br><span class=\"line\">        keyUniverse = em.keyUniverse;</span><br><span class=\"line\">        vals = em.vals.clone();</span><br><span class=\"line\">        size = em.size;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m.isEmpty())</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Specified map is empty\"</span>);</span><br><span class=\"line\">        keyType = m.keySet().iterator().next().getDeclaringClass();</span><br><span class=\"line\">        keyUniverse = getKeyUniverse(keyType);</span><br><span class=\"line\">        vals = <span class=\"keyword\">new</span> Object[keyUniverse.length];</span><br><span class=\"line\">        putAll(m);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"put方法解析\"><a href=\"#put方法解析\" class=\"headerlink\" title=\"put方法解析\"></a>put方法解析</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">    typeCheck(key);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = key.ordinal();</span><br><span class=\"line\">    Object oldValue = vals[index];</span><br><span class=\"line\">    vals[index] = maskNull(value);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldValue == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unmaskNull(oldValue);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">typeCheck</span><span class=\"params\">(K key)</span> </span>&#123;</span><br><span class=\"line\">    Class keyClass = key.getClass();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (keyClass != keyType &amp;&amp; keyClass.getSuperclass() != keyType)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ClassCastException(keyClass + <span class=\"string\">\" != \"</span> + keyType);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Object <span class=\"title\">maskNull</span><span class=\"params\">(Object value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (value == <span class=\"keyword\">null</span> ? NULL : value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> V <span class=\"title\">unmaskNull</span><span class=\"params\">(Object value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (V) (value == NULL ? <span class=\"keyword\">null</span> : value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object NULL = <span class=\"keyword\">new</span> Object() &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"java.util.EnumMap.NULL\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>typeCheck方法校验传入key的类型是否与EnumMap初始化时定义的枚举类型对应(包含子类)</li>\n<li>EnumMap允许value为null，为了区别null值与没有值，EnumMap将null值包装成了一个特殊的NULL对象，<br>有两个辅助方法用于null的打包和解包，打包方法为maskNull，解包方法为unmaskNull。</li>\n<li>ordinal()方法是获取key在枚举类中的顺序(索引),将该索引作为往vals数组存放value的索引</li>\n<li>当put相同的key不同value的时候.会重新将旧value覆盖，然后将value值置空。</li>\n</ul>\n<h3 id=\"get方法解析\"><a href=\"#get方法解析\" class=\"headerlink\" title=\"get方法解析\"></a>get方法解析</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (isValidKey(key) ?</span><br><span class=\"line\">            unmaskNull(vals[((Enum)key).ordinal()]) : <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidKey</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// Cheaper than instanceof Enum followed by getDeclaringClass</span></span><br><span class=\"line\">    Class keyClass = key.getClass();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> keyClass == keyType || keyClass.getSuperclass() == keyType;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>从上面代码可以看出，key通过数组下标映射数据，因此get数据的时候速度效率非常高。</li>\n</ul>\n<h3 id=\"remove方法解析\"><a href=\"#remove方法解析\" class=\"headerlink\" title=\"remove方法解析\"></a>remove方法解析</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">remove</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isValidKey(key))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = ((Enum&lt;?&gt;)key).ordinal();</span><br><span class=\"line\">    Object oldValue = vals[index];</span><br><span class=\"line\">    vals[index] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldValue != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        size--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unmaskNull(oldValue);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>从上面代码可以看出,删除元素之前先对key进行验证，如果key不是map初始化时指定的枚举类型，那么将会返回null。</li>\n<li>当验证完key之后，再用该key在枚举类中的顺序号作为寻找value的下标，通过该下标将val数组中的值置空。如果value不为null的话，map的size就减1。</li>\n<li>最终将卸载NULL对象，返回删除的value。在remove操作中是不会删除key数组(keyUniverse[])中的任何元素。keyUniverse[]在类构造阶段已经初始化完毕，一直伴随着map的整个生命周期，直到该EnumMap被卸载。</li>\n<li>这里有一个问题需要注意，从代码中我们没有看到任何关于线程安全的代码，因此就会产生ABA的问题。当多线程环境下，很有可能发生当我们删除一个key的value时，value置空了，但是size–没有执行，这时候又有一个线程对相同的key进行put操作,我们获取的size大小就有可能不变,也有可能变大。产生脏读的情况。</li>\n</ul>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.EnumMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        EnumMap&lt;ResultEnum, String&gt; map = <span class=\"keyword\">new</span> EnumMap&lt;ResultEnum, String&gt;(ResultEnum.class);</span><br><span class=\"line\">        map.put(ResultEnum.SUCCESS,<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">        map.put(ResultEnum.SUCCESS,<span class=\"string\">\"2\"</span>);</span><br><span class=\"line\">        map.put(ResultEnum.FAIL,<span class=\"string\">\"3\"</span>);</span><br><span class=\"line\">        map.put(ResultEnum.DEALING,<span class=\"string\">\"4\"</span>);</span><br><span class=\"line\">        map.put(ResultEnum.UNKNOWN,<span class=\"string\">\"5\"</span>);</span><br><span class=\"line\">        System.out.println(map);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;SUCCESS=<span class=\"number\">2</span>, FAIL=<span class=\"number\">3</span>, DEALING=<span class=\"number\">4</span>, UNKNOWN=<span class=\"number\">5</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>状态机：根据老大的提示，周六在公司回顾EnumMap的时候，发现确实可以使用EmumMap作为状态机。状态机实现见:EnumMap状态机实现。</p>\n<p>分类场景：对于自己而言，更多的是数据分类场景，同一类的数据对应到同一个枚举，即枚举对应Map的形式。</p>\n<p>由于EnumMap并非线程安全，因此并不适合并发修改的场景。当然，也可以自定义将EnumMap封装成适用并发的Map类，这些都是后话了。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><blockquote>\n<p>以上就是EnumMap的基本实现原理，内部有两个数组，长度相同，一个表示所有可能的键，一个表示对应的值，值为null表示没有该键值对，键都有一个对应的索引，根据索引可直接访问和操作其键和值，效率很高。<br>  EnumMap的缺点就是并非是线程安全的，可以用工具类包装成现成安全的:Map&lt;EnumKey, V&gt; m = Collections.synchronizedMap(new EnumMap&lt;EnumKey, V&gt;();</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote class=\"blockquote-center\"><p>前段时间学习spring、tomcat的源码非常吃力，发现很多东西都是因为自己的Java基础不够牢固,<br>因此搭建了此博客开始重点关注java基础的相关知识。这篇文章主要分析自己很少使用的EnumMap。</p>\n</blockquote>","more":"<h3 id=\"EnumMap的继承类与实现接口\"><a href=\"#EnumMap的继承类与实现接口\" class=\"headerlink\" title=\"EnumMap的继承类与实现接口\"></a>EnumMap的继承类与实现接口</h3><p><img src=\"/image/java-EnumMap/java-EnumMap01.png\" alt=\"截图\"></p>\n<h3 id=\"EnumMap内部的方法\"><a href=\"#EnumMap内部的方法\" class=\"headerlink\" title=\"EnumMap内部的方法\"></a>EnumMap内部的方法</h3><p><img src=\"/image/java-EnumMap/java-EnumMap02.png\" alt=\"截图\"></p>\n<h3 id=\"类定义\"><a href=\"#类定义\" class=\"headerlink\" title=\"类定义\"></a>类定义</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnumMap</span>&lt;<span class=\"title\">K</span> <span class=\"keyword\">extends</span> <span class=\"title\">Enum</span>&lt;<span class=\"title\">K</span>&gt;, <span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span>, <span class=\"title\">Cloneable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Class&lt;K&gt; keyType;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> K[] keyUniverse;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> Object[] vals;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上成员变量含义:keyType表示类型信息，keyUniverse表示键，是所有可能的枚举值，vals表示键对应的值，size表示键值对个数。</p>\n<h3 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过枚举的Class类型构造</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EnumMap</span><span class=\"params\">(Class&lt;K&gt; keyType)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.keyType = keyType;</span><br><span class=\"line\">    keyUniverse = getKeyUniverse(keyType);</span><br><span class=\"line\">    vals = <span class=\"keyword\">new</span> Object[keyUniverse.length];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过EnumMap构造</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EnumMap</span><span class=\"params\">(EnumMap&lt;K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class=\"line\">     keyType = m.keyType;</span><br><span class=\"line\">     keyUniverse = m.keyUniverse;</span><br><span class=\"line\">     vals = m.vals.clone();</span><br><span class=\"line\">     size = m.size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过Map构造,必须保证key的类型是枚举类型</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EnumMap</span><span class=\"params\">(Map&lt;K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m <span class=\"keyword\">instanceof</span> EnumMap) &#123;</span><br><span class=\"line\">        EnumMap&lt;K, ? extends V&gt; em = (EnumMap&lt;K, ? extends V&gt;) m;</span><br><span class=\"line\">        keyType = em.keyType;</span><br><span class=\"line\">        keyUniverse = em.keyUniverse;</span><br><span class=\"line\">        vals = em.vals.clone();</span><br><span class=\"line\">        size = em.size;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m.isEmpty())</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Specified map is empty\"</span>);</span><br><span class=\"line\">        keyType = m.keySet().iterator().next().getDeclaringClass();</span><br><span class=\"line\">        keyUniverse = getKeyUniverse(keyType);</span><br><span class=\"line\">        vals = <span class=\"keyword\">new</span> Object[keyUniverse.length];</span><br><span class=\"line\">        putAll(m);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"put方法解析\"><a href=\"#put方法解析\" class=\"headerlink\" title=\"put方法解析\"></a>put方法解析</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">    typeCheck(key);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = key.ordinal();</span><br><span class=\"line\">    Object oldValue = vals[index];</span><br><span class=\"line\">    vals[index] = maskNull(value);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldValue == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unmaskNull(oldValue);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">typeCheck</span><span class=\"params\">(K key)</span> </span>&#123;</span><br><span class=\"line\">    Class keyClass = key.getClass();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (keyClass != keyType &amp;&amp; keyClass.getSuperclass() != keyType)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ClassCastException(keyClass + <span class=\"string\">\" != \"</span> + keyType);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Object <span class=\"title\">maskNull</span><span class=\"params\">(Object value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (value == <span class=\"keyword\">null</span> ? NULL : value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> V <span class=\"title\">unmaskNull</span><span class=\"params\">(Object value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (V) (value == NULL ? <span class=\"keyword\">null</span> : value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object NULL = <span class=\"keyword\">new</span> Object() &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"java.util.EnumMap.NULL\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>typeCheck方法校验传入key的类型是否与EnumMap初始化时定义的枚举类型对应(包含子类)</li>\n<li>EnumMap允许value为null，为了区别null值与没有值，EnumMap将null值包装成了一个特殊的NULL对象，<br>有两个辅助方法用于null的打包和解包，打包方法为maskNull，解包方法为unmaskNull。</li>\n<li>ordinal()方法是获取key在枚举类中的顺序(索引),将该索引作为往vals数组存放value的索引</li>\n<li>当put相同的key不同value的时候.会重新将旧value覆盖，然后将value值置空。</li>\n</ul>\n<h3 id=\"get方法解析\"><a href=\"#get方法解析\" class=\"headerlink\" title=\"get方法解析\"></a>get方法解析</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (isValidKey(key) ?</span><br><span class=\"line\">            unmaskNull(vals[((Enum)key).ordinal()]) : <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidKey</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// Cheaper than instanceof Enum followed by getDeclaringClass</span></span><br><span class=\"line\">    Class keyClass = key.getClass();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> keyClass == keyType || keyClass.getSuperclass() == keyType;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>从上面代码可以看出，key通过数组下标映射数据，因此get数据的时候速度效率非常高。</li>\n</ul>\n<h3 id=\"remove方法解析\"><a href=\"#remove方法解析\" class=\"headerlink\" title=\"remove方法解析\"></a>remove方法解析</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">remove</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isValidKey(key))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = ((Enum&lt;?&gt;)key).ordinal();</span><br><span class=\"line\">    Object oldValue = vals[index];</span><br><span class=\"line\">    vals[index] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldValue != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        size--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unmaskNull(oldValue);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>从上面代码可以看出,删除元素之前先对key进行验证，如果key不是map初始化时指定的枚举类型，那么将会返回null。</li>\n<li>当验证完key之后，再用该key在枚举类中的顺序号作为寻找value的下标，通过该下标将val数组中的值置空。如果value不为null的话，map的size就减1。</li>\n<li>最终将卸载NULL对象，返回删除的value。在remove操作中是不会删除key数组(keyUniverse[])中的任何元素。keyUniverse[]在类构造阶段已经初始化完毕，一直伴随着map的整个生命周期，直到该EnumMap被卸载。</li>\n<li>这里有一个问题需要注意，从代码中我们没有看到任何关于线程安全的代码，因此就会产生ABA的问题。当多线程环境下，很有可能发生当我们删除一个key的value时，value置空了，但是size–没有执行，这时候又有一个线程对相同的key进行put操作,我们获取的size大小就有可能不变,也有可能变大。产生脏读的情况。</li>\n</ul>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.EnumMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        EnumMap&lt;ResultEnum, String&gt; map = <span class=\"keyword\">new</span> EnumMap&lt;ResultEnum, String&gt;(ResultEnum.class);</span><br><span class=\"line\">        map.put(ResultEnum.SUCCESS,<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">        map.put(ResultEnum.SUCCESS,<span class=\"string\">\"2\"</span>);</span><br><span class=\"line\">        map.put(ResultEnum.FAIL,<span class=\"string\">\"3\"</span>);</span><br><span class=\"line\">        map.put(ResultEnum.DEALING,<span class=\"string\">\"4\"</span>);</span><br><span class=\"line\">        map.put(ResultEnum.UNKNOWN,<span class=\"string\">\"5\"</span>);</span><br><span class=\"line\">        System.out.println(map);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;SUCCESS=<span class=\"number\">2</span>, FAIL=<span class=\"number\">3</span>, DEALING=<span class=\"number\">4</span>, UNKNOWN=<span class=\"number\">5</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>状态机：根据老大的提示，周六在公司回顾EnumMap的时候，发现确实可以使用EmumMap作为状态机。状态机实现见:EnumMap状态机实现。</p>\n<p>分类场景：对于自己而言，更多的是数据分类场景，同一类的数据对应到同一个枚举，即枚举对应Map的形式。</p>\n<p>由于EnumMap并非线程安全，因此并不适合并发修改的场景。当然，也可以自定义将EnumMap封装成适用并发的Map类，这些都是后话了。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><blockquote>\n<p>以上就是EnumMap的基本实现原理，内部有两个数组，长度相同，一个表示所有可能的键，一个表示对应的值，值为null表示没有该键值对，键都有一个对应的索引，根据索引可直接访问和操作其键和值，效率很高。<br>  EnumMap的缺点就是并非是线程安全的，可以用工具类包装成现成安全的:Map&lt;EnumKey, V&gt; m = Collections.synchronizedMap(new EnumMap&lt;EnumKey, V&gt;();</p>\n</blockquote>"},{"title":"简单状态机实现,通过EnumMap收集所有转换状态。","date":"2018-04-22T15:49:25.000Z","copyright":true,"_content":"{% cq %}\n根据公司老大提示，查阅资料发现状态机其实是一种设计模式，能够很大程度上减少我们if else的条件判断，尤其是在做状态转换的时候，本篇文章通过EnumMap做一个状态机的简单实现。\n{% endcq %}\n\n<!-- more -->\n\n> 根据公司项目(P2P网关)中的状态，简单实现一个状态机\n\n### 状态定义枚举类\n{% codeblock lang:java %}\n/**\n * 状态定义\n */\npublic enum StatusDefine {\n    SUCCESS,\n    FAILED,\n    DEALING,\n    UNKNOW;\n}\n{% endcodeblock %}\n\n### 具体操作接口\n{% codeblock lang:java %}\n/**\n * 具体操作接口\n */\npublic interface Action {\n    /**\n     * 转换状态方法\n     */\n    public void convertStatus();\n}\n{% endcodeblock %}\n\n### 状态转换枚举类\n{% codeblock lang:java %}\n\npublic enum StatusConvert{\n\n\n    /** 失败转换成成功 */\n    FAIL_TO_SUCCESS(StatusDefine.FAILED,StatusDefine.SUCCESS){\n        @Override\n        public void todoConvertStatus() {\n            doSomething(new Action() {\n                @Override\n                public void convertStatus() {\n                    System.out.println(\"失败->成功\");\n                }\n            });\n        }\n    },\n    DEALING_TO_SUCCESS(StatusDefine.DEALING,StatusDefine.SUCCESS){\n        @Override\n        public void todoConvertStatus() {\n            doSomething(new Action() {\n                @Override\n                public void convertStatus() {\n                    System.out.println(\"处理中->成功\");\n                }\n            });\n        }\n    },\n    UNKNOWN_TO_SUCCESS(StatusDefine.UNKNOW,StatusDefine.SUCCESS){\n        @Override\n        public void todoConvertStatus() {\n            doSomething(new Action() {\n                @Override\n                public void convertStatus() {\n                    System.out.println(\"未知->成功\");\n                }\n            });\n        }\n    };\n\n    /**\n     * 状态转换集合\n     */\n    public static final EnumMap<StatusDefine, EnumMap<StatusDefine, StatusConvert>> ALL_STATUS = new EnumMap<StatusDefine, EnumMap<StatusDefine, StatusConvert>>(StatusDefine.class);\n\n\n    /**\n     * 当前状态\n     */\n    private StatusDefine start;\n    /**\n     * 目标状态\n     */\n    private StatusDefine target;\n\n    /**\n     * 初始化ALL_STATUS\n     */\n    static {\n        for (StatusDefine statusDefine : StatusDefine.values()){\n            ALL_STATUS.put(statusDefine,new EnumMap<StatusDefine, StatusConvert>(StatusDefine.class));\n        }\n\n        for (StatusConvert statusConvert : StatusConvert.values()) {\n            ALL_STATUS.get(statusConvert.start).put(statusConvert.target, statusConvert);\n        }\n\n    }\n\n    StatusConvert(StatusDefine start, StatusDefine target) {\n        this.start = start;\n        this.target = target;\n    }\n\n    /**\n     * 状态转换抽象方法\n     */\n    abstract void todoConvertStatus();\n\n    /**\n     * 模板方法\n     * @param action\n     */\n    protected void doSomething(Action action){\n        System.out.println(\"转换状态之前的操作\");\n        action.convertStatus();\n        System.out.println(\"转换状态之后的操作\");\n    }\n\n}\n{% endcodeblock %}\n\n### 测试方法\n{% codeblock lang:java %}\npublic static void main(String[] args) {\n    StatusConvert.ALL_STATUS.get(StatusDefine.FAILED).get(StatusDefine.SUCCESS).todoConvertStatus()\n    System.out.println(\"***************\");\n    StatusConvert.DEALING_TO_SUCCESS.todoConvertStatus();\n}\n{% endcodeblock %}\n\n> 可以将上面的调用封装成一个静态的执行方法，在此由于方便理解，就不做封装了。\n\n### 测试结果\n{% codeblock lang:java %}\n转换状态之前的操作\n失败->成功\n转换状态之后的操作\n***************\n转换状态之前的操作\n处理中->成功\n转换状态之后的操作\n{% endcodeblock %}\n\n### 总结\n\n> 以上实现方式能够将所有的状态定义清晰的展现出来，并且所有的状态转换操作都是以StatusDefine(状态定义类)为基础，通过模版方法对状态转换之前和之后的公共代码抽出来，以便我们只关注状态转换的实现。\n\n\n### 提示\n> 以上是博主第一次实现状态机，如有瑕疵还需大家指正。\n\n\n\n\n\n\n","source":"_posts/java-stateMachine.md","raw":"---\ntitle: 简单状态机实现,通过EnumMap收集所有转换状态。\ndate: 2018-04-22 23:49:25\ncopyright: true\ntags:\n - java\ncategories:\n - java\n---\n{% cq %}\n根据公司老大提示，查阅资料发现状态机其实是一种设计模式，能够很大程度上减少我们if else的条件判断，尤其是在做状态转换的时候，本篇文章通过EnumMap做一个状态机的简单实现。\n{% endcq %}\n\n<!-- more -->\n\n> 根据公司项目(P2P网关)中的状态，简单实现一个状态机\n\n### 状态定义枚举类\n{% codeblock lang:java %}\n/**\n * 状态定义\n */\npublic enum StatusDefine {\n    SUCCESS,\n    FAILED,\n    DEALING,\n    UNKNOW;\n}\n{% endcodeblock %}\n\n### 具体操作接口\n{% codeblock lang:java %}\n/**\n * 具体操作接口\n */\npublic interface Action {\n    /**\n     * 转换状态方法\n     */\n    public void convertStatus();\n}\n{% endcodeblock %}\n\n### 状态转换枚举类\n{% codeblock lang:java %}\n\npublic enum StatusConvert{\n\n\n    /** 失败转换成成功 */\n    FAIL_TO_SUCCESS(StatusDefine.FAILED,StatusDefine.SUCCESS){\n        @Override\n        public void todoConvertStatus() {\n            doSomething(new Action() {\n                @Override\n                public void convertStatus() {\n                    System.out.println(\"失败->成功\");\n                }\n            });\n        }\n    },\n    DEALING_TO_SUCCESS(StatusDefine.DEALING,StatusDefine.SUCCESS){\n        @Override\n        public void todoConvertStatus() {\n            doSomething(new Action() {\n                @Override\n                public void convertStatus() {\n                    System.out.println(\"处理中->成功\");\n                }\n            });\n        }\n    },\n    UNKNOWN_TO_SUCCESS(StatusDefine.UNKNOW,StatusDefine.SUCCESS){\n        @Override\n        public void todoConvertStatus() {\n            doSomething(new Action() {\n                @Override\n                public void convertStatus() {\n                    System.out.println(\"未知->成功\");\n                }\n            });\n        }\n    };\n\n    /**\n     * 状态转换集合\n     */\n    public static final EnumMap<StatusDefine, EnumMap<StatusDefine, StatusConvert>> ALL_STATUS = new EnumMap<StatusDefine, EnumMap<StatusDefine, StatusConvert>>(StatusDefine.class);\n\n\n    /**\n     * 当前状态\n     */\n    private StatusDefine start;\n    /**\n     * 目标状态\n     */\n    private StatusDefine target;\n\n    /**\n     * 初始化ALL_STATUS\n     */\n    static {\n        for (StatusDefine statusDefine : StatusDefine.values()){\n            ALL_STATUS.put(statusDefine,new EnumMap<StatusDefine, StatusConvert>(StatusDefine.class));\n        }\n\n        for (StatusConvert statusConvert : StatusConvert.values()) {\n            ALL_STATUS.get(statusConvert.start).put(statusConvert.target, statusConvert);\n        }\n\n    }\n\n    StatusConvert(StatusDefine start, StatusDefine target) {\n        this.start = start;\n        this.target = target;\n    }\n\n    /**\n     * 状态转换抽象方法\n     */\n    abstract void todoConvertStatus();\n\n    /**\n     * 模板方法\n     * @param action\n     */\n    protected void doSomething(Action action){\n        System.out.println(\"转换状态之前的操作\");\n        action.convertStatus();\n        System.out.println(\"转换状态之后的操作\");\n    }\n\n}\n{% endcodeblock %}\n\n### 测试方法\n{% codeblock lang:java %}\npublic static void main(String[] args) {\n    StatusConvert.ALL_STATUS.get(StatusDefine.FAILED).get(StatusDefine.SUCCESS).todoConvertStatus()\n    System.out.println(\"***************\");\n    StatusConvert.DEALING_TO_SUCCESS.todoConvertStatus();\n}\n{% endcodeblock %}\n\n> 可以将上面的调用封装成一个静态的执行方法，在此由于方便理解，就不做封装了。\n\n### 测试结果\n{% codeblock lang:java %}\n转换状态之前的操作\n失败->成功\n转换状态之后的操作\n***************\n转换状态之前的操作\n处理中->成功\n转换状态之后的操作\n{% endcodeblock %}\n\n### 总结\n\n> 以上实现方式能够将所有的状态定义清晰的展现出来，并且所有的状态转换操作都是以StatusDefine(状态定义类)为基础，通过模版方法对状态转换之前和之后的公共代码抽出来，以便我们只关注状态转换的实现。\n\n\n### 提示\n> 以上是博主第一次实现状态机，如有瑕疵还需大家指正。\n\n\n\n\n\n\n","slug":"java-stateMachine","published":1,"updated":"2018-04-30T06:47:44.658Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgt7pa2p0003lcty79qma421","content":"<blockquote class=\"blockquote-center\"><p>根据公司老大提示，查阅资料发现状态机其实是一种设计模式，能够很大程度上减少我们if else的条件判断，尤其是在做状态转换的时候，本篇文章通过EnumMap做一个状态机的简单实现。</p>\n</blockquote>\n<a id=\"more\"></a>\n<blockquote>\n<p>根据公司项目(P2P网关)中的状态，简单实现一个状态机</p>\n</blockquote>\n<h3 id=\"状态定义枚举类\"><a href=\"#状态定义枚举类\" class=\"headerlink\" title=\"状态定义枚举类\"></a>状态定义枚举类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态定义</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> StatusDefine &#123;</span><br><span class=\"line\">    SUCCESS,</span><br><span class=\"line\">    FAILED,</span><br><span class=\"line\">    DEALING,</span><br><span class=\"line\">    UNKNOW;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"具体操作接口\"><a href=\"#具体操作接口\" class=\"headerlink\" title=\"具体操作接口\"></a>具体操作接口</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体操作接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Action</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 转换状态方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">convertStatus</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"状态转换枚举类\"><a href=\"#状态转换枚举类\" class=\"headerlink\" title=\"状态转换枚举类\"></a>状态转换枚举类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> StatusConvert&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 失败转换成成功 */</span></span><br><span class=\"line\">    FAIL_TO_SUCCESS(StatusDefine.FAILED,StatusDefine.SUCCESS)&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">todoConvertStatus</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            doSomething(<span class=\"keyword\">new</span> Action() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">convertStatus</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"失败-&gt;成功\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    DEALING_TO_SUCCESS(StatusDefine.DEALING,StatusDefine.SUCCESS)&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">todoConvertStatus</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            doSomething(<span class=\"keyword\">new</span> Action() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">convertStatus</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"处理中-&gt;成功\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    UNKNOWN_TO_SUCCESS(StatusDefine.UNKNOW,StatusDefine.SUCCESS)&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">todoConvertStatus</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            doSomething(<span class=\"keyword\">new</span> Action() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">convertStatus</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"未知-&gt;成功\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 状态转换集合</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> EnumMap&lt;StatusDefine, EnumMap&lt;StatusDefine, StatusConvert&gt;&gt; ALL_STATUS = <span class=\"keyword\">new</span> EnumMap&lt;StatusDefine, EnumMap&lt;StatusDefine, StatusConvert&gt;&gt;(StatusDefine.class);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当前状态</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> StatusDefine start;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 目标状态</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> StatusDefine target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化ALL_STATUS</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (StatusDefine statusDefine : StatusDefine.values())&#123;</span><br><span class=\"line\">            ALL_STATUS.put(statusDefine,<span class=\"keyword\">new</span> EnumMap&lt;StatusDefine, StatusConvert&gt;(StatusDefine.class));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (StatusConvert statusConvert : StatusConvert.values()) &#123;</span><br><span class=\"line\">            ALL_STATUS.get(statusConvert.start).put(statusConvert.target, statusConvert);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    StatusConvert(StatusDefine start, StatusDefine target) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.start = start;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 状态转换抽象方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">todoConvertStatus</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 模板方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> action</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">(Action action)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"转换状态之前的操作\"</span>);</span><br><span class=\"line\">        action.convertStatus();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"转换状态之后的操作\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试方法\"><a href=\"#测试方法\" class=\"headerlink\" title=\"测试方法\"></a>测试方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    StatusConvert.ALL_STATUS.get(StatusDefine.FAILED).get(StatusDefine.SUCCESS).todoConvertStatus()</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"***************\"</span>);</span><br><span class=\"line\">    StatusConvert.DEALING_TO_SUCCESS.todoConvertStatus();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可以将上面的调用封装成一个静态的执行方法，在此由于方便理解，就不做封装了。</p>\n</blockquote>\n<h3 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">转换状态之前的操作</span><br><span class=\"line\">失败-&gt;成功</span><br><span class=\"line\">转换状态之后的操作</span><br><span class=\"line\">***************</span><br><span class=\"line\">转换状态之前的操作</span><br><span class=\"line\">处理中-&gt;成功</span><br><span class=\"line\">转换状态之后的操作</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><blockquote>\n<p>以上实现方式能够将所有的状态定义清晰的展现出来，并且所有的状态转换操作都是以StatusDefine(状态定义类)为基础，通过模版方法对状态转换之前和之后的公共代码抽出来，以便我们只关注状态转换的实现。</p>\n</blockquote>\n<h3 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h3><blockquote>\n<p>以上是博主第一次实现状态机，如有瑕疵还需大家指正。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote class=\"blockquote-center\"><p>根据公司老大提示，查阅资料发现状态机其实是一种设计模式，能够很大程度上减少我们if else的条件判断，尤其是在做状态转换的时候，本篇文章通过EnumMap做一个状态机的简单实现。</p>\n</blockquote>","more":"<blockquote>\n<p>根据公司项目(P2P网关)中的状态，简单实现一个状态机</p>\n</blockquote>\n<h3 id=\"状态定义枚举类\"><a href=\"#状态定义枚举类\" class=\"headerlink\" title=\"状态定义枚举类\"></a>状态定义枚举类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态定义</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> StatusDefine &#123;</span><br><span class=\"line\">    SUCCESS,</span><br><span class=\"line\">    FAILED,</span><br><span class=\"line\">    DEALING,</span><br><span class=\"line\">    UNKNOW;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"具体操作接口\"><a href=\"#具体操作接口\" class=\"headerlink\" title=\"具体操作接口\"></a>具体操作接口</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体操作接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Action</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 转换状态方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">convertStatus</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"状态转换枚举类\"><a href=\"#状态转换枚举类\" class=\"headerlink\" title=\"状态转换枚举类\"></a>状态转换枚举类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> StatusConvert&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 失败转换成成功 */</span></span><br><span class=\"line\">    FAIL_TO_SUCCESS(StatusDefine.FAILED,StatusDefine.SUCCESS)&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">todoConvertStatus</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            doSomething(<span class=\"keyword\">new</span> Action() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">convertStatus</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"失败-&gt;成功\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    DEALING_TO_SUCCESS(StatusDefine.DEALING,StatusDefine.SUCCESS)&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">todoConvertStatus</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            doSomething(<span class=\"keyword\">new</span> Action() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">convertStatus</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"处理中-&gt;成功\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    UNKNOWN_TO_SUCCESS(StatusDefine.UNKNOW,StatusDefine.SUCCESS)&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">todoConvertStatus</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            doSomething(<span class=\"keyword\">new</span> Action() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">convertStatus</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"未知-&gt;成功\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 状态转换集合</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> EnumMap&lt;StatusDefine, EnumMap&lt;StatusDefine, StatusConvert&gt;&gt; ALL_STATUS = <span class=\"keyword\">new</span> EnumMap&lt;StatusDefine, EnumMap&lt;StatusDefine, StatusConvert&gt;&gt;(StatusDefine.class);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当前状态</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> StatusDefine start;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 目标状态</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> StatusDefine target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化ALL_STATUS</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (StatusDefine statusDefine : StatusDefine.values())&#123;</span><br><span class=\"line\">            ALL_STATUS.put(statusDefine,<span class=\"keyword\">new</span> EnumMap&lt;StatusDefine, StatusConvert&gt;(StatusDefine.class));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (StatusConvert statusConvert : StatusConvert.values()) &#123;</span><br><span class=\"line\">            ALL_STATUS.get(statusConvert.start).put(statusConvert.target, statusConvert);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    StatusConvert(StatusDefine start, StatusDefine target) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.start = start;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 状态转换抽象方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">todoConvertStatus</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 模板方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> action</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">(Action action)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"转换状态之前的操作\"</span>);</span><br><span class=\"line\">        action.convertStatus();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"转换状态之后的操作\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试方法\"><a href=\"#测试方法\" class=\"headerlink\" title=\"测试方法\"></a>测试方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    StatusConvert.ALL_STATUS.get(StatusDefine.FAILED).get(StatusDefine.SUCCESS).todoConvertStatus()</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"***************\"</span>);</span><br><span class=\"line\">    StatusConvert.DEALING_TO_SUCCESS.todoConvertStatus();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可以将上面的调用封装成一个静态的执行方法，在此由于方便理解，就不做封装了。</p>\n</blockquote>\n<h3 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">转换状态之前的操作</span><br><span class=\"line\">失败-&gt;成功</span><br><span class=\"line\">转换状态之后的操作</span><br><span class=\"line\">***************</span><br><span class=\"line\">转换状态之前的操作</span><br><span class=\"line\">处理中-&gt;成功</span><br><span class=\"line\">转换状态之后的操作</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><blockquote>\n<p>以上实现方式能够将所有的状态定义清晰的展现出来，并且所有的状态转换操作都是以StatusDefine(状态定义类)为基础，通过模版方法对状态转换之前和之后的公共代码抽出来，以便我们只关注状态转换的实现。</p>\n</blockquote>\n<h3 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h3><blockquote>\n<p>以上是博主第一次实现状态机，如有瑕疵还需大家指正。</p>\n</blockquote>"},{"title":"IdentityHashmap解析","date":"2018-04-30T09:10:06.000Z","copyright":true,"_content":"\n{% cq %}\n本篇文章主要浅析IdentityHashmap的使用、适用场景和内部实现原理。\n{% endcq %}\n\n<!-- more -->\n\n\n### **IdentityHashMap 继承类与实现接口**\n\n![截图](/image/java-IdentityHashmap/java-IdentityHashmap01.png)\n\n\n### **IdentityHashMap 内部的方法**\n\n![截图](/image/java-IdentityHashmap/java-IdentityHashmap02.png)\n\n\n### **IdentityHashMap示例**\n\n- 示例\n{% codeblock lang:java %}\n@Test\npublic void testIdentityHashMap(){\n   String xanderXu = new String(\"XanderXu\");\n   \n   Map<String, Object> identityHashMap = new IdentityHashMap<>();\n   identityHashMap.put(new String(\"XanderXu\"),\"666\");\n   identityHashMap.put(new String(\"XanderXu\"),\"777\");\n   identityHashMap.put(xanderXu, \"xiaofei\");\n   identityHashMap.put(xanderXu, \"xiaofei--2\");\n\n   System.out.println(identityHashMap);\n}\n{% endcodeblock %}\n\n- 运行结果\n{% codeblock lang:java %}\n{XanderXu=666, XanderXu=xiaofei--2, XanderXu=777}\n{% endcodeblock %}\n> 从IdentityHashMap的继承关系可以看出IdentityHashMap并非继承于HashMap,而是兄弟关系，共同继承Map，从示例中我们也可以看出IdentitHashMap与HashMap的一大不同：IdentitHashMap允许\"equals\"为true的key同时存在,但不允许\"==\"为true的key同时存在。\n\n### **IdentityHashMap 成员变量**\n{% codeblock lang:java %}\n\n/**\n * 默认容量\n */\nprivate static final int DEFAULT_CAPACITY = 32;\n\n/**\n * 最小容量\n */\nprivate static final int MINIMUM_CAPACITY = 4;\n\n/**\n * 最大容量\n */\nprivate static final int MAXIMUM_CAPACITY = 1 << 29;\n\n/**\n * 实际存放元素数组\n */\ntransient Object[] table; // non-private to simplify nested class access\n\n/**\n * 元素个数\n */\nint size;\n\n/**\n * 修改次数,以支持快速失败\n */\ntransient int modCount;\n\n/**\n * NULL对象\n */\nstatic final Object NULL_KEY = new Object();\n{% endcodeblock %}\n> 从成员变量中可以看出IdentityHashMap数据结构就是一个Object数组,默认容量为32(这里是指存放的键值对数，后面init方法会有讲解),支持迭代器的快速失败,并且对null进行包装(区别put的是null还是原本是null)。\n\n\n### **核心方法解析**\n\n- init方法\n{% codeblock lang:java %}\nprivate void init(int initCapacity) {\n    // assert (initCapacity & -initCapacity) == initCapacity; // power of 2\n    // assert initCapacity >= MINIMUM_CAPACITY;\n    // assert initCapacity <= MAXIMUM_CAPACITY;    \n    table = new Object[2 * initCapacity];\n}\n{% endcodeblock %}\n> 因为IdentityHashMap中key和value都是存放数组(table)中的,因此默认容量是32，但是占用的空间是64。所以初始化时要乘以2。\n\n\n- hash方法\n{% codeblock lang:java %}\nprivate static int hash(Object x, int length) {\n    int h = System.identityHashCode(x);\n    // Multiply by -127, and left-shift to use least bit as part of hash\n    return ((h << 1) - (h << 8)) & (length - 1);\n}\n{% endcodeblock %}\n> identityHashCode是一个Native方法,是根据对象的内存地址来计算hash值的。并且应为length一定是2的n次方,所以减1后和任何数相与得到的永远是偶数，所以key一定是存放在偶数位\n\n- nextKeyIndex方法\n{% codeblock lang:java %}\nprivate static int nextKeyIndex(int i, int len) {\n    return (i + 2 < len ? i + 2 : 0);\n}\n{% endcodeblock %}\n> 获取下一个key的数组下标\n\n- resize方法\n{% codeblock lang:java %}\nprivate boolean resize(int newCapacity) {\n    // assert (newCapacity & -newCapacity) == newCapacity; // power of 2\n    int newLength = newCapacity * 2;\n\n    Object[] oldTable = table;\n    int oldLength = oldTable.length;\n    if (oldLength == 2 * MAXIMUM_CAPACITY) { // can't expand any further\n        if (size == MAXIMUM_CAPACITY - 1)\n            throw new IllegalStateException(\"Capacity exhausted.\");\n        return false;\n    }\n    if (oldLength >= newLength)\n        return false;\n\n    Object[] newTable = new Object[newLength];\n\n    for (int j = 0; j < oldLength; j += 2) {\n        Object key = oldTable[j];\n        if (key != null) {\n            Object value = oldTable[j+1];\n            oldTable[j] = null;\n            oldTable[j+1] = null;\n            int i = hash(key, newLength);\n            while (newTable[i] != null)\n                i = nextKeyIndex(i, newLength);\n            newTable[i] = key;\n            newTable[i + 1] = value;\n        }\n    }\n    table = newTable;\n    return true;\n}\n{% endcodeblock %}\n> 判断容量是否超过最大值,将旧值置空，重新计算hash值，赋值到新table中\n\n\n- put方法\n{% codeblock lang:java %}\npublic V put(K key, V value) {\n    final Object k = maskNull(key);\n\n    retryAfterResize: for (;;) {\n        final Object[] tab = table;\n        final int len = tab.length;\n        int i = hash(k, len);\n\n        for (Object item; (item = tab[i]) != null;\n             i = nextKeyIndex(i, len)) {\n            if (item == k) {\n                @SuppressWarnings(\"unchecked\")\n                    V oldValue = (V) tab[i + 1];\n                tab[i + 1] = value;\n                return oldValue;\n            }\n        }\n\n        final int s = size + 1;\n        // Use optimized form of 3 * s.\n        // Next capacity is len, 2 * current capacity.\n        if (s + (s << 1) > len && resize(len))\n            continue retryAfterResize;\n\n        modCount++;\n        tab[i] = k;\n        tab[i + 1] = value;\n        size = s;\n        return null;\n    }\n}\n{% endcodeblock %}\n> 先根据hash值获取数组中的位置，然后往后判断是否存在和引用相等的key，如果存在则替换value，返回旧值。终止条件为当前key是null(注意并不是NULL_KEY)\n> 如果没有找到相等引用，那么就停止循环，循环后table[i]一定是null的(循环过程中i一直在变)，这时进行插入操作，在插入操作之前判断是否需要扩容。\n> 上面s + (s << 1) = s + (s * 2) = s(1=2) = 3s > len,也就是说当键值对的个数大于表长的三分之一的时候就会进行扩容\n\n- get方法\n{% codeblock lang:java %}\n@SuppressWarnings(\"unchecked\")\npublic V get(Object key) {\n    Object k = maskNull(key);\n    Object[] tab = table;\n    int len = tab.length;\n    int i = hash(k, len);\n    while (true) {\n        Object item = tab[i];\n        if (item == k)\n            return (V) tab[i + 1];\n        if (item == null)\n            return null;\n        i = nextKeyIndex(i, len);\n    }\n}\n{% endcodeblock %}\n> 先检查key是否是null,然后对key哈希取值确定索引，如果没有找到，就到下一个key，直到为key为null为止。\n\n\n\n- closeDeletion方法\n{% codeblock lang:java %}\nprivate void closeDeletion(int d) {\n    // Adapted from Knuth Section 6.4 Algorithm R\n    Object[] tab = table;\n    int len = tab.length;\n\n    // Look for items to swap into newly vacated slot\n    // starting at index immediately following deletion,\n    // and continuing until a null slot is seen, indicating\n    // the end of a run of possibly-colliding keys.\n    Object item;\n    for (int i = nextKeyIndex(d, len); (item = tab[i]) != null;\n         i = nextKeyIndex(i, len) ) {\n        // The following test triggers if the item at slot i (which\n        // hashes to be at slot r) should take the spot vacated by d.\n        // If so, we swap it in, and then continue with d now at the\n        // newly vacated i.  This process will terminate when we hit\n        // the null slot at the end of this run.\n        // The test is messy because we are using a circular table.\n        int r = hash(item, len);\n        if ((i < r && (r <= d || d <= i)) || (r <= d && d <= i)) {\n            tab[d] = item;\n            tab[d + 1] = tab[i + 1];\n            tab[i] = null;\n            tab[i + 1] = null;\n            d = i;\n        }\n    }\n}   \n{% endcodeblock %}\n> 删除后,将后面的键值对向前调整,防止找不到key的情况发生。if条件判断该key是否发生hash碰撞，只要发生过碰撞,就会往前移动。\n\n\n\n- remove方法\n{% codeblock lang:java %}\npublic V remove(Object key) {\n    Object k = maskNull(key);\n    Object[] tab = table;\n    int len = tab.length;\n    int i = hash(k, len);\n\n    while (true) {\n        Object item = tab[i];\n        if (item == k) {\n            modCount++;\n            size--;\n            @SuppressWarnings(\"unchecked\")\n                V oldValue = (V) tab[i + 1];\n            tab[i + 1] = null;\n            tab[i] = null;\n            closeDeletion(i);\n            return oldValue;\n        }\n        if (item == null)\n            return null;\n        i = nextKeyIndex(i, len);\n    }\n}\n{% endcodeblock %}\n> 获取对应key然后hash取值,将对应key删除,并且通过closeDeletion方法对后面的键值对向前做调整\n\n\n\n### **总结**\n\n> 1、IdentityHashMap 是通过引用来判断键是否相等的，并且允许null值和null键、允许重复键的Map容器。 \n  2、IdentityHashMap 解决哈希冲突的方式是采用线性探测法即往后寻找为null的槽位\n  3、IdentityHashMap 默认的初始容量为 32 ，扩容每次扩为原来的两倍。\n  4、IdentityHashMap 每一次做删除操作都会调整一次map\n","source":"_posts/java-IdentityHashmap.md","raw":"---\ntitle: IdentityHashmap解析\ndate: 2018-04-30 17:10:06\ncopyright: true\ntags:\n - java\ncategories:\n - java\n---\n\n{% cq %}\n本篇文章主要浅析IdentityHashmap的使用、适用场景和内部实现原理。\n{% endcq %}\n\n<!-- more -->\n\n\n### **IdentityHashMap 继承类与实现接口**\n\n![截图](/image/java-IdentityHashmap/java-IdentityHashmap01.png)\n\n\n### **IdentityHashMap 内部的方法**\n\n![截图](/image/java-IdentityHashmap/java-IdentityHashmap02.png)\n\n\n### **IdentityHashMap示例**\n\n- 示例\n{% codeblock lang:java %}\n@Test\npublic void testIdentityHashMap(){\n   String xanderXu = new String(\"XanderXu\");\n   \n   Map<String, Object> identityHashMap = new IdentityHashMap<>();\n   identityHashMap.put(new String(\"XanderXu\"),\"666\");\n   identityHashMap.put(new String(\"XanderXu\"),\"777\");\n   identityHashMap.put(xanderXu, \"xiaofei\");\n   identityHashMap.put(xanderXu, \"xiaofei--2\");\n\n   System.out.println(identityHashMap);\n}\n{% endcodeblock %}\n\n- 运行结果\n{% codeblock lang:java %}\n{XanderXu=666, XanderXu=xiaofei--2, XanderXu=777}\n{% endcodeblock %}\n> 从IdentityHashMap的继承关系可以看出IdentityHashMap并非继承于HashMap,而是兄弟关系，共同继承Map，从示例中我们也可以看出IdentitHashMap与HashMap的一大不同：IdentitHashMap允许\"equals\"为true的key同时存在,但不允许\"==\"为true的key同时存在。\n\n### **IdentityHashMap 成员变量**\n{% codeblock lang:java %}\n\n/**\n * 默认容量\n */\nprivate static final int DEFAULT_CAPACITY = 32;\n\n/**\n * 最小容量\n */\nprivate static final int MINIMUM_CAPACITY = 4;\n\n/**\n * 最大容量\n */\nprivate static final int MAXIMUM_CAPACITY = 1 << 29;\n\n/**\n * 实际存放元素数组\n */\ntransient Object[] table; // non-private to simplify nested class access\n\n/**\n * 元素个数\n */\nint size;\n\n/**\n * 修改次数,以支持快速失败\n */\ntransient int modCount;\n\n/**\n * NULL对象\n */\nstatic final Object NULL_KEY = new Object();\n{% endcodeblock %}\n> 从成员变量中可以看出IdentityHashMap数据结构就是一个Object数组,默认容量为32(这里是指存放的键值对数，后面init方法会有讲解),支持迭代器的快速失败,并且对null进行包装(区别put的是null还是原本是null)。\n\n\n### **核心方法解析**\n\n- init方法\n{% codeblock lang:java %}\nprivate void init(int initCapacity) {\n    // assert (initCapacity & -initCapacity) == initCapacity; // power of 2\n    // assert initCapacity >= MINIMUM_CAPACITY;\n    // assert initCapacity <= MAXIMUM_CAPACITY;    \n    table = new Object[2 * initCapacity];\n}\n{% endcodeblock %}\n> 因为IdentityHashMap中key和value都是存放数组(table)中的,因此默认容量是32，但是占用的空间是64。所以初始化时要乘以2。\n\n\n- hash方法\n{% codeblock lang:java %}\nprivate static int hash(Object x, int length) {\n    int h = System.identityHashCode(x);\n    // Multiply by -127, and left-shift to use least bit as part of hash\n    return ((h << 1) - (h << 8)) & (length - 1);\n}\n{% endcodeblock %}\n> identityHashCode是一个Native方法,是根据对象的内存地址来计算hash值的。并且应为length一定是2的n次方,所以减1后和任何数相与得到的永远是偶数，所以key一定是存放在偶数位\n\n- nextKeyIndex方法\n{% codeblock lang:java %}\nprivate static int nextKeyIndex(int i, int len) {\n    return (i + 2 < len ? i + 2 : 0);\n}\n{% endcodeblock %}\n> 获取下一个key的数组下标\n\n- resize方法\n{% codeblock lang:java %}\nprivate boolean resize(int newCapacity) {\n    // assert (newCapacity & -newCapacity) == newCapacity; // power of 2\n    int newLength = newCapacity * 2;\n\n    Object[] oldTable = table;\n    int oldLength = oldTable.length;\n    if (oldLength == 2 * MAXIMUM_CAPACITY) { // can't expand any further\n        if (size == MAXIMUM_CAPACITY - 1)\n            throw new IllegalStateException(\"Capacity exhausted.\");\n        return false;\n    }\n    if (oldLength >= newLength)\n        return false;\n\n    Object[] newTable = new Object[newLength];\n\n    for (int j = 0; j < oldLength; j += 2) {\n        Object key = oldTable[j];\n        if (key != null) {\n            Object value = oldTable[j+1];\n            oldTable[j] = null;\n            oldTable[j+1] = null;\n            int i = hash(key, newLength);\n            while (newTable[i] != null)\n                i = nextKeyIndex(i, newLength);\n            newTable[i] = key;\n            newTable[i + 1] = value;\n        }\n    }\n    table = newTable;\n    return true;\n}\n{% endcodeblock %}\n> 判断容量是否超过最大值,将旧值置空，重新计算hash值，赋值到新table中\n\n\n- put方法\n{% codeblock lang:java %}\npublic V put(K key, V value) {\n    final Object k = maskNull(key);\n\n    retryAfterResize: for (;;) {\n        final Object[] tab = table;\n        final int len = tab.length;\n        int i = hash(k, len);\n\n        for (Object item; (item = tab[i]) != null;\n             i = nextKeyIndex(i, len)) {\n            if (item == k) {\n                @SuppressWarnings(\"unchecked\")\n                    V oldValue = (V) tab[i + 1];\n                tab[i + 1] = value;\n                return oldValue;\n            }\n        }\n\n        final int s = size + 1;\n        // Use optimized form of 3 * s.\n        // Next capacity is len, 2 * current capacity.\n        if (s + (s << 1) > len && resize(len))\n            continue retryAfterResize;\n\n        modCount++;\n        tab[i] = k;\n        tab[i + 1] = value;\n        size = s;\n        return null;\n    }\n}\n{% endcodeblock %}\n> 先根据hash值获取数组中的位置，然后往后判断是否存在和引用相等的key，如果存在则替换value，返回旧值。终止条件为当前key是null(注意并不是NULL_KEY)\n> 如果没有找到相等引用，那么就停止循环，循环后table[i]一定是null的(循环过程中i一直在变)，这时进行插入操作，在插入操作之前判断是否需要扩容。\n> 上面s + (s << 1) = s + (s * 2) = s(1=2) = 3s > len,也就是说当键值对的个数大于表长的三分之一的时候就会进行扩容\n\n- get方法\n{% codeblock lang:java %}\n@SuppressWarnings(\"unchecked\")\npublic V get(Object key) {\n    Object k = maskNull(key);\n    Object[] tab = table;\n    int len = tab.length;\n    int i = hash(k, len);\n    while (true) {\n        Object item = tab[i];\n        if (item == k)\n            return (V) tab[i + 1];\n        if (item == null)\n            return null;\n        i = nextKeyIndex(i, len);\n    }\n}\n{% endcodeblock %}\n> 先检查key是否是null,然后对key哈希取值确定索引，如果没有找到，就到下一个key，直到为key为null为止。\n\n\n\n- closeDeletion方法\n{% codeblock lang:java %}\nprivate void closeDeletion(int d) {\n    // Adapted from Knuth Section 6.4 Algorithm R\n    Object[] tab = table;\n    int len = tab.length;\n\n    // Look for items to swap into newly vacated slot\n    // starting at index immediately following deletion,\n    // and continuing until a null slot is seen, indicating\n    // the end of a run of possibly-colliding keys.\n    Object item;\n    for (int i = nextKeyIndex(d, len); (item = tab[i]) != null;\n         i = nextKeyIndex(i, len) ) {\n        // The following test triggers if the item at slot i (which\n        // hashes to be at slot r) should take the spot vacated by d.\n        // If so, we swap it in, and then continue with d now at the\n        // newly vacated i.  This process will terminate when we hit\n        // the null slot at the end of this run.\n        // The test is messy because we are using a circular table.\n        int r = hash(item, len);\n        if ((i < r && (r <= d || d <= i)) || (r <= d && d <= i)) {\n            tab[d] = item;\n            tab[d + 1] = tab[i + 1];\n            tab[i] = null;\n            tab[i + 1] = null;\n            d = i;\n        }\n    }\n}   \n{% endcodeblock %}\n> 删除后,将后面的键值对向前调整,防止找不到key的情况发生。if条件判断该key是否发生hash碰撞，只要发生过碰撞,就会往前移动。\n\n\n\n- remove方法\n{% codeblock lang:java %}\npublic V remove(Object key) {\n    Object k = maskNull(key);\n    Object[] tab = table;\n    int len = tab.length;\n    int i = hash(k, len);\n\n    while (true) {\n        Object item = tab[i];\n        if (item == k) {\n            modCount++;\n            size--;\n            @SuppressWarnings(\"unchecked\")\n                V oldValue = (V) tab[i + 1];\n            tab[i + 1] = null;\n            tab[i] = null;\n            closeDeletion(i);\n            return oldValue;\n        }\n        if (item == null)\n            return null;\n        i = nextKeyIndex(i, len);\n    }\n}\n{% endcodeblock %}\n> 获取对应key然后hash取值,将对应key删除,并且通过closeDeletion方法对后面的键值对向前做调整\n\n\n\n### **总结**\n\n> 1、IdentityHashMap 是通过引用来判断键是否相等的，并且允许null值和null键、允许重复键的Map容器。 \n  2、IdentityHashMap 解决哈希冲突的方式是采用线性探测法即往后寻找为null的槽位\n  3、IdentityHashMap 默认的初始容量为 32 ，扩容每次扩为原来的两倍。\n  4、IdentityHashMap 每一次做删除操作都会调整一次map\n","slug":"java-IdentityHashmap","published":1,"updated":"2018-05-01T09:12:04.138Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgt7pa2t0007lctyyhupehl6","content":"<blockquote class=\"blockquote-center\"><p>本篇文章主要浅析IdentityHashmap的使用、适用场景和内部实现原理。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"IdentityHashMap-继承类与实现接口\"><a href=\"#IdentityHashMap-继承类与实现接口\" class=\"headerlink\" title=\"IdentityHashMap 继承类与实现接口\"></a><strong>IdentityHashMap 继承类与实现接口</strong></h3><p><img src=\"/image/java-IdentityHashmap/java-IdentityHashmap01.png\" alt=\"截图\"></p>\n<h3 id=\"IdentityHashMap-内部的方法\"><a href=\"#IdentityHashMap-内部的方法\" class=\"headerlink\" title=\"IdentityHashMap 内部的方法\"></a><strong>IdentityHashMap 内部的方法</strong></h3><p><img src=\"/image/java-IdentityHashmap/java-IdentityHashmap02.png\" alt=\"截图\"></p>\n<h3 id=\"IdentityHashMap示例\"><a href=\"#IdentityHashMap示例\" class=\"headerlink\" title=\"IdentityHashMap示例\"></a><strong>IdentityHashMap示例</strong></h3><ul>\n<li><p>示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testIdentityHashMap</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">   String xanderXu = <span class=\"keyword\">new</span> String(<span class=\"string\">\"XanderXu\"</span>);</span><br><span class=\"line\">   </span><br><span class=\"line\">   Map&lt;String, Object&gt; identityHashMap = <span class=\"keyword\">new</span> IdentityHashMap&lt;&gt;();</span><br><span class=\"line\">   identityHashMap.put(<span class=\"keyword\">new</span> String(<span class=\"string\">\"XanderXu\"</span>),<span class=\"string\">\"666\"</span>);</span><br><span class=\"line\">   identityHashMap.put(<span class=\"keyword\">new</span> String(<span class=\"string\">\"XanderXu\"</span>),<span class=\"string\">\"777\"</span>);</span><br><span class=\"line\">   identityHashMap.put(xanderXu, <span class=\"string\">\"xiaofei\"</span>);</span><br><span class=\"line\">   identityHashMap.put(xanderXu, <span class=\"string\">\"xiaofei--2\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   System.out.println(identityHashMap);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;XanderXu=<span class=\"number\">666</span>, XanderXu=xiaofei--<span class=\"number\">2</span>, XanderXu=<span class=\"number\">777</span>&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>从IdentityHashMap的继承关系可以看出IdentityHashMap并非继承于HashMap,而是兄弟关系，共同继承Map，从示例中我们也可以看出IdentitHashMap与HashMap的一大不同：IdentitHashMap允许”equals”为true的key同时存在,但不允许”==”为true的key同时存在。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"IdentityHashMap-成员变量\"><a href=\"#IdentityHashMap-成员变量\" class=\"headerlink\" title=\"IdentityHashMap 成员变量\"></a><strong>IdentityHashMap 成员变量</strong></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 默认容量</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAPACITY = <span class=\"number\">32</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 最小容量</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MINIMUM_CAPACITY = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 最大容量</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAXIMUM_CAPACITY = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">29</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实际存放元素数组</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> Object[] table; <span class=\"comment\">// non-private to simplify nested class access</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 元素个数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 修改次数,以支持快速失败</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> modCount;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * NULL对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object NULL_KEY = <span class=\"keyword\">new</span> Object();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>从成员变量中可以看出IdentityHashMap数据结构就是一个Object数组,默认容量为32(这里是指存放的键值对数，后面init方法会有讲解),支持迭代器的快速失败,并且对null进行包装(区别put的是null还是原本是null)。</p>\n</blockquote>\n<h3 id=\"核心方法解析\"><a href=\"#核心方法解析\" class=\"headerlink\" title=\"核心方法解析\"></a><strong>核心方法解析</strong></h3><ul>\n<li>init方法<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">int</span> initCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// assert (initCapacity &amp; -initCapacity) == initCapacity; // power of 2</span></span><br><span class=\"line\">    <span class=\"comment\">// assert initCapacity &gt;= MINIMUM_CAPACITY;</span></span><br><span class=\"line\">    <span class=\"comment\">// assert initCapacity &lt;= MAXIMUM_CAPACITY;    </span></span><br><span class=\"line\">    table = <span class=\"keyword\">new</span> Object[<span class=\"number\">2</span> * initCapacity];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>因为IdentityHashMap中key和value都是存放数组(table)中的,因此默认容量是32，但是占用的空间是64。所以初始化时要乘以2。</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>hash方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object x, <span class=\"keyword\">int</span> length)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = System.identityHashCode(x);</span><br><span class=\"line\">    <span class=\"comment\">// Multiply by -127, and left-shift to use least bit as part of hash</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((h &lt;&lt; <span class=\"number\">1</span>) - (h &lt;&lt; <span class=\"number\">8</span>)) &amp; (length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>identityHashCode是一个Native方法,是根据对象的内存地址来计算hash值的。并且应为length一定是2的n次方,所以减1后和任何数相与得到的永远是偶数，所以key一定是存放在偶数位</p>\n</blockquote>\n</li>\n<li><p>nextKeyIndex方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">nextKeyIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (i + <span class=\"number\">2</span> &lt; len ? i + <span class=\"number\">2</span> : <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>获取下一个key的数组下标</p>\n</blockquote>\n</li>\n<li><p>resize方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">resize</span><span class=\"params\">(<span class=\"keyword\">int</span> newCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// assert (newCapacity &amp; -newCapacity) == newCapacity; // power of 2</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> newLength = newCapacity * <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Object[] oldTable = table;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldLength = oldTable.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldLength == <span class=\"number\">2</span> * MAXIMUM_CAPACITY) &#123; <span class=\"comment\">// can't expand any further</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == MAXIMUM_CAPACITY - <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Capacity exhausted.\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldLength &gt;= newLength)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Object[] newTable = <span class=\"keyword\">new</span> Object[newLength];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; oldLength; j += <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        Object key = oldTable[j];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            Object value = oldTable[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">            oldTable[j] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            oldTable[j+<span class=\"number\">1</span>] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = hash(key, newLength);</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (newTable[i] != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                i = nextKeyIndex(i, newLength);</span><br><span class=\"line\">            newTable[i] = key;</span><br><span class=\"line\">            newTable[i + <span class=\"number\">1</span>] = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    table = newTable;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>判断容量是否超过最大值,将旧值置空，重新计算hash值，赋值到新table中</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>put方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Object k = maskNull(key);</span><br><span class=\"line\"></span><br><span class=\"line\">    retryAfterResize: <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Object[] tab = table;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> len = tab.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = hash(k, len);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object item; (item = tab[i]) != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">             i = nextKeyIndex(i, len)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (item == k) &#123;</span><br><span class=\"line\">                <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">                    V oldValue = (V) tab[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">                tab[i + <span class=\"number\">1</span>] = value;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> s = size + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// Use optimized form of 3 * s.</span></span><br><span class=\"line\">        <span class=\"comment\">// Next capacity is len, 2 * current capacity.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s + (s &lt;&lt; <span class=\"number\">1</span>) &gt; len &amp;&amp; resize(len))</span><br><span class=\"line\">            <span class=\"keyword\">continue</span> retryAfterResize;</span><br><span class=\"line\"></span><br><span class=\"line\">        modCount++;</span><br><span class=\"line\">        tab[i] = k;</span><br><span class=\"line\">        tab[i + <span class=\"number\">1</span>] = value;</span><br><span class=\"line\">        size = s;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>先根据hash值获取数组中的位置，然后往后判断是否存在和引用相等的key，如果存在则替换value，返回旧值。终止条件为当前key是null(注意并不是NULL_KEY)<br>如果没有找到相等引用，那么就停止循环，循环后table[i]一定是null的(循环过程中i一直在变)，这时进行插入操作，在插入操作之前判断是否需要扩容。<br>上面s + (s &lt;&lt; 1) = s + (s * 2) = s(1=2) = 3s &gt; len,也就是说当键值对的个数大于表长的三分之一的时候就会进行扩容</p>\n</blockquote>\n</li>\n<li><p>get方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    Object k = maskNull(key);</span><br><span class=\"line\">    Object[] tab = table;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = tab.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = hash(k, len);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">        Object item = tab[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item == k)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (V) tab[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        i = nextKeyIndex(i, len);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>先检查key是否是null,然后对key哈希取值确定索引，如果没有找到，就到下一个key，直到为key为null为止。</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>closeDeletion方法<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">closeDeletion</span><span class=\"params\">(<span class=\"keyword\">int</span> d)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Adapted from Knuth Section 6.4 Algorithm R</span></span><br><span class=\"line\">    Object[] tab = table;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = tab.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Look for items to swap into newly vacated slot</span></span><br><span class=\"line\">    <span class=\"comment\">// starting at index immediately following deletion,</span></span><br><span class=\"line\">    <span class=\"comment\">// and continuing until a null slot is seen, indicating</span></span><br><span class=\"line\">    <span class=\"comment\">// the end of a run of possibly-colliding keys.</span></span><br><span class=\"line\">    Object item;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = nextKeyIndex(d, len); (item = tab[i]) != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">         i = nextKeyIndex(i, len) ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// The following test triggers if the item at slot i (which</span></span><br><span class=\"line\">        <span class=\"comment\">// hashes to be at slot r) should take the spot vacated by d.</span></span><br><span class=\"line\">        <span class=\"comment\">// If so, we swap it in, and then continue with d now at the</span></span><br><span class=\"line\">        <span class=\"comment\">// newly vacated i.  This process will terminate when we hit</span></span><br><span class=\"line\">        <span class=\"comment\">// the null slot at the end of this run.</span></span><br><span class=\"line\">        <span class=\"comment\">// The test is messy because we are using a circular table.</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> r = hash(item, len);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((i &lt; r &amp;&amp; (r &lt;= d || d &lt;= i)) || (r &lt;= d &amp;&amp; d &lt;= i)) &#123;</span><br><span class=\"line\">            tab[d] = item;</span><br><span class=\"line\">            tab[d + <span class=\"number\">1</span>] = tab[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">            tab[i] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            tab[i + <span class=\"number\">1</span>] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            d = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;   </span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>删除后,将后面的键值对向前调整,防止找不到key的情况发生。if条件判断该key是否发生hash碰撞，只要发生过碰撞,就会往前移动。</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>remove方法<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">remove</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    Object k = maskNull(key);</span><br><span class=\"line\">    Object[] tab = table;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = tab.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = hash(k, len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">        Object item = tab[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item == k) &#123;</span><br><span class=\"line\">            modCount++;</span><br><span class=\"line\">            size--;</span><br><span class=\"line\">            <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">                V oldValue = (V) tab[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">            tab[i + <span class=\"number\">1</span>] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            tab[i] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            closeDeletion(i);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        i = nextKeyIndex(i, len);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>获取对应key然后hash取值,将对应key删除,并且通过closeDeletion方法对后面的键值对向前做调整</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h3><blockquote>\n<p>1、IdentityHashMap 是通过引用来判断键是否相等的，并且允许null值和null键、允许重复键的Map容器。<br>  2、IdentityHashMap 解决哈希冲突的方式是采用线性探测法即往后寻找为null的槽位<br>  3、IdentityHashMap 默认的初始容量为 32 ，扩容每次扩为原来的两倍。<br>  4、IdentityHashMap 每一次做删除操作都会调整一次map</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote class=\"blockquote-center\"><p>本篇文章主要浅析IdentityHashmap的使用、适用场景和内部实现原理。</p>\n</blockquote>","more":"<h3 id=\"IdentityHashMap-继承类与实现接口\"><a href=\"#IdentityHashMap-继承类与实现接口\" class=\"headerlink\" title=\"IdentityHashMap 继承类与实现接口\"></a><strong>IdentityHashMap 继承类与实现接口</strong></h3><p><img src=\"/image/java-IdentityHashmap/java-IdentityHashmap01.png\" alt=\"截图\"></p>\n<h3 id=\"IdentityHashMap-内部的方法\"><a href=\"#IdentityHashMap-内部的方法\" class=\"headerlink\" title=\"IdentityHashMap 内部的方法\"></a><strong>IdentityHashMap 内部的方法</strong></h3><p><img src=\"/image/java-IdentityHashmap/java-IdentityHashmap02.png\" alt=\"截图\"></p>\n<h3 id=\"IdentityHashMap示例\"><a href=\"#IdentityHashMap示例\" class=\"headerlink\" title=\"IdentityHashMap示例\"></a><strong>IdentityHashMap示例</strong></h3><ul>\n<li><p>示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testIdentityHashMap</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">   String xanderXu = <span class=\"keyword\">new</span> String(<span class=\"string\">\"XanderXu\"</span>);</span><br><span class=\"line\">   </span><br><span class=\"line\">   Map&lt;String, Object&gt; identityHashMap = <span class=\"keyword\">new</span> IdentityHashMap&lt;&gt;();</span><br><span class=\"line\">   identityHashMap.put(<span class=\"keyword\">new</span> String(<span class=\"string\">\"XanderXu\"</span>),<span class=\"string\">\"666\"</span>);</span><br><span class=\"line\">   identityHashMap.put(<span class=\"keyword\">new</span> String(<span class=\"string\">\"XanderXu\"</span>),<span class=\"string\">\"777\"</span>);</span><br><span class=\"line\">   identityHashMap.put(xanderXu, <span class=\"string\">\"xiaofei\"</span>);</span><br><span class=\"line\">   identityHashMap.put(xanderXu, <span class=\"string\">\"xiaofei--2\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   System.out.println(identityHashMap);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;XanderXu=<span class=\"number\">666</span>, XanderXu=xiaofei--<span class=\"number\">2</span>, XanderXu=<span class=\"number\">777</span>&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>从IdentityHashMap的继承关系可以看出IdentityHashMap并非继承于HashMap,而是兄弟关系，共同继承Map，从示例中我们也可以看出IdentitHashMap与HashMap的一大不同：IdentitHashMap允许”equals”为true的key同时存在,但不允许”==”为true的key同时存在。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"IdentityHashMap-成员变量\"><a href=\"#IdentityHashMap-成员变量\" class=\"headerlink\" title=\"IdentityHashMap 成员变量\"></a><strong>IdentityHashMap 成员变量</strong></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 默认容量</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAPACITY = <span class=\"number\">32</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 最小容量</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MINIMUM_CAPACITY = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 最大容量</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAXIMUM_CAPACITY = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">29</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实际存放元素数组</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> Object[] table; <span class=\"comment\">// non-private to simplify nested class access</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 元素个数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 修改次数,以支持快速失败</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> modCount;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * NULL对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object NULL_KEY = <span class=\"keyword\">new</span> Object();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>从成员变量中可以看出IdentityHashMap数据结构就是一个Object数组,默认容量为32(这里是指存放的键值对数，后面init方法会有讲解),支持迭代器的快速失败,并且对null进行包装(区别put的是null还是原本是null)。</p>\n</blockquote>\n<h3 id=\"核心方法解析\"><a href=\"#核心方法解析\" class=\"headerlink\" title=\"核心方法解析\"></a><strong>核心方法解析</strong></h3><ul>\n<li>init方法<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">int</span> initCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// assert (initCapacity &amp; -initCapacity) == initCapacity; // power of 2</span></span><br><span class=\"line\">    <span class=\"comment\">// assert initCapacity &gt;= MINIMUM_CAPACITY;</span></span><br><span class=\"line\">    <span class=\"comment\">// assert initCapacity &lt;= MAXIMUM_CAPACITY;    </span></span><br><span class=\"line\">    table = <span class=\"keyword\">new</span> Object[<span class=\"number\">2</span> * initCapacity];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>因为IdentityHashMap中key和value都是存放数组(table)中的,因此默认容量是32，但是占用的空间是64。所以初始化时要乘以2。</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>hash方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object x, <span class=\"keyword\">int</span> length)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = System.identityHashCode(x);</span><br><span class=\"line\">    <span class=\"comment\">// Multiply by -127, and left-shift to use least bit as part of hash</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((h &lt;&lt; <span class=\"number\">1</span>) - (h &lt;&lt; <span class=\"number\">8</span>)) &amp; (length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>identityHashCode是一个Native方法,是根据对象的内存地址来计算hash值的。并且应为length一定是2的n次方,所以减1后和任何数相与得到的永远是偶数，所以key一定是存放在偶数位</p>\n</blockquote>\n</li>\n<li><p>nextKeyIndex方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">nextKeyIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (i + <span class=\"number\">2</span> &lt; len ? i + <span class=\"number\">2</span> : <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>获取下一个key的数组下标</p>\n</blockquote>\n</li>\n<li><p>resize方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">resize</span><span class=\"params\">(<span class=\"keyword\">int</span> newCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// assert (newCapacity &amp; -newCapacity) == newCapacity; // power of 2</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> newLength = newCapacity * <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Object[] oldTable = table;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldLength = oldTable.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldLength == <span class=\"number\">2</span> * MAXIMUM_CAPACITY) &#123; <span class=\"comment\">// can't expand any further</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == MAXIMUM_CAPACITY - <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Capacity exhausted.\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldLength &gt;= newLength)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Object[] newTable = <span class=\"keyword\">new</span> Object[newLength];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; oldLength; j += <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        Object key = oldTable[j];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            Object value = oldTable[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">            oldTable[j] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            oldTable[j+<span class=\"number\">1</span>] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = hash(key, newLength);</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (newTable[i] != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                i = nextKeyIndex(i, newLength);</span><br><span class=\"line\">            newTable[i] = key;</span><br><span class=\"line\">            newTable[i + <span class=\"number\">1</span>] = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    table = newTable;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>判断容量是否超过最大值,将旧值置空，重新计算hash值，赋值到新table中</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>put方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Object k = maskNull(key);</span><br><span class=\"line\"></span><br><span class=\"line\">    retryAfterResize: <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Object[] tab = table;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> len = tab.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = hash(k, len);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object item; (item = tab[i]) != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">             i = nextKeyIndex(i, len)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (item == k) &#123;</span><br><span class=\"line\">                <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">                    V oldValue = (V) tab[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">                tab[i + <span class=\"number\">1</span>] = value;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> s = size + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// Use optimized form of 3 * s.</span></span><br><span class=\"line\">        <span class=\"comment\">// Next capacity is len, 2 * current capacity.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s + (s &lt;&lt; <span class=\"number\">1</span>) &gt; len &amp;&amp; resize(len))</span><br><span class=\"line\">            <span class=\"keyword\">continue</span> retryAfterResize;</span><br><span class=\"line\"></span><br><span class=\"line\">        modCount++;</span><br><span class=\"line\">        tab[i] = k;</span><br><span class=\"line\">        tab[i + <span class=\"number\">1</span>] = value;</span><br><span class=\"line\">        size = s;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>先根据hash值获取数组中的位置，然后往后判断是否存在和引用相等的key，如果存在则替换value，返回旧值。终止条件为当前key是null(注意并不是NULL_KEY)<br>如果没有找到相等引用，那么就停止循环，循环后table[i]一定是null的(循环过程中i一直在变)，这时进行插入操作，在插入操作之前判断是否需要扩容。<br>上面s + (s &lt;&lt; 1) = s + (s * 2) = s(1=2) = 3s &gt; len,也就是说当键值对的个数大于表长的三分之一的时候就会进行扩容</p>\n</blockquote>\n</li>\n<li><p>get方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    Object k = maskNull(key);</span><br><span class=\"line\">    Object[] tab = table;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = tab.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = hash(k, len);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">        Object item = tab[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item == k)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (V) tab[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        i = nextKeyIndex(i, len);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>先检查key是否是null,然后对key哈希取值确定索引，如果没有找到，就到下一个key，直到为key为null为止。</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>closeDeletion方法<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">closeDeletion</span><span class=\"params\">(<span class=\"keyword\">int</span> d)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Adapted from Knuth Section 6.4 Algorithm R</span></span><br><span class=\"line\">    Object[] tab = table;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = tab.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Look for items to swap into newly vacated slot</span></span><br><span class=\"line\">    <span class=\"comment\">// starting at index immediately following deletion,</span></span><br><span class=\"line\">    <span class=\"comment\">// and continuing until a null slot is seen, indicating</span></span><br><span class=\"line\">    <span class=\"comment\">// the end of a run of possibly-colliding keys.</span></span><br><span class=\"line\">    Object item;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = nextKeyIndex(d, len); (item = tab[i]) != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">         i = nextKeyIndex(i, len) ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// The following test triggers if the item at slot i (which</span></span><br><span class=\"line\">        <span class=\"comment\">// hashes to be at slot r) should take the spot vacated by d.</span></span><br><span class=\"line\">        <span class=\"comment\">// If so, we swap it in, and then continue with d now at the</span></span><br><span class=\"line\">        <span class=\"comment\">// newly vacated i.  This process will terminate when we hit</span></span><br><span class=\"line\">        <span class=\"comment\">// the null slot at the end of this run.</span></span><br><span class=\"line\">        <span class=\"comment\">// The test is messy because we are using a circular table.</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> r = hash(item, len);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((i &lt; r &amp;&amp; (r &lt;= d || d &lt;= i)) || (r &lt;= d &amp;&amp; d &lt;= i)) &#123;</span><br><span class=\"line\">            tab[d] = item;</span><br><span class=\"line\">            tab[d + <span class=\"number\">1</span>] = tab[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">            tab[i] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            tab[i + <span class=\"number\">1</span>] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            d = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;   </span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>删除后,将后面的键值对向前调整,防止找不到key的情况发生。if条件判断该key是否发生hash碰撞，只要发生过碰撞,就会往前移动。</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>remove方法<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">remove</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    Object k = maskNull(key);</span><br><span class=\"line\">    Object[] tab = table;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = tab.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = hash(k, len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">        Object item = tab[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item == k) &#123;</span><br><span class=\"line\">            modCount++;</span><br><span class=\"line\">            size--;</span><br><span class=\"line\">            <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">                V oldValue = (V) tab[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">            tab[i + <span class=\"number\">1</span>] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            tab[i] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            closeDeletion(i);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        i = nextKeyIndex(i, len);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>获取对应key然后hash取值,将对应key删除,并且通过closeDeletion方法对后面的键值对向前做调整</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h3><blockquote>\n<p>1、IdentityHashMap 是通过引用来判断键是否相等的，并且允许null值和null键、允许重复键的Map容器。<br>  2、IdentityHashMap 解决哈希冲突的方式是采用线性探测法即往后寻找为null的槽位<br>  3、IdentityHashMap 默认的初始容量为 32 ，扩容每次扩为原来的两倍。<br>  4、IdentityHashMap 每一次做删除操作都会调整一次map</p>\n</blockquote>"},{"title":"WeakHashMap解析","date":"2018-05-05T09:34:06.000Z","copyright":true,"_content":"\n{% cq %}\n本篇文章主要浅析WeakHashMap的使用、适用场景和内部实现原理。\n{% endcq %}\n\n<!-- more -->\n\n\n### **IdentityHashMap 继承类与实现接口**\n\n![截图](/image/java-WeakHashMap/map01.png)\n\n\n### **IdentityHashMap 内部的方法**\n\n![截图](/image/java-WeakHashMap/map02.png)\n\n\n### 成员变量\n\n/**\n * 默认初始容量\n */\nprivate static final int DEFAULT_INITIAL_CAPACITY = 16;\n\n\n/**\n * 最大容量\n */\nprivate static final int MAXIMUM_CAPACITY = 1 << 30;\n\n\n/**\n * 默认加载因子 0.75\n */\nprivate static final float DEFAULT_LOAD_FACTOR = 0.75f;\n\n\n/**\n * 元素数组\n */\nEntry<K,V>[] table;\n\n\n/**\n * 元素个数\n */\nprivate int size;\n\n\n/**\n * \n */\nprivate int threshold;\n\n\n/**\n * \n */\nprivate final float loadFactor;\n\n\n/**\n * 引用队列,用于清除\n */\nprivate final ReferenceQueue<Object> queue = new ReferenceQueue<>();\n\n\n/**\n * 修改计数\n */\nint modCount;\n\n\n### put方法\n","source":"_posts/java-WeakHashMap.md","raw":"---\ntitle: WeakHashMap解析\ndate: 2018-05-05 17:34:06\ncopyright: true\ntags:\n - java\ncategories:\n - java\n---\n\n{% cq %}\n本篇文章主要浅析WeakHashMap的使用、适用场景和内部实现原理。\n{% endcq %}\n\n<!-- more -->\n\n\n### **IdentityHashMap 继承类与实现接口**\n\n![截图](/image/java-WeakHashMap/map01.png)\n\n\n### **IdentityHashMap 内部的方法**\n\n![截图](/image/java-WeakHashMap/map02.png)\n\n\n### 成员变量\n\n/**\n * 默认初始容量\n */\nprivate static final int DEFAULT_INITIAL_CAPACITY = 16;\n\n\n/**\n * 最大容量\n */\nprivate static final int MAXIMUM_CAPACITY = 1 << 30;\n\n\n/**\n * 默认加载因子 0.75\n */\nprivate static final float DEFAULT_LOAD_FACTOR = 0.75f;\n\n\n/**\n * 元素数组\n */\nEntry<K,V>[] table;\n\n\n/**\n * 元素个数\n */\nprivate int size;\n\n\n/**\n * \n */\nprivate int threshold;\n\n\n/**\n * \n */\nprivate final float loadFactor;\n\n\n/**\n * 引用队列,用于清除\n */\nprivate final ReferenceQueue<Object> queue = new ReferenceQueue<>();\n\n\n/**\n * 修改计数\n */\nint modCount;\n\n\n### put方法\n","slug":"java-WeakHashMap","published":1,"updated":"2018-05-05T10:20:04.935Z","_id":"cjgt7pa2u0008lctyw3tnymin","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote class=\"blockquote-center\"><p>本篇文章主要浅析WeakHashMap的使用、适用场景和内部实现原理。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"IdentityHashMap-继承类与实现接口\"><a href=\"#IdentityHashMap-继承类与实现接口\" class=\"headerlink\" title=\"IdentityHashMap 继承类与实现接口\"></a><strong>IdentityHashMap 继承类与实现接口</strong></h3><p><img src=\"/image/java-WeakHashMap/map01.png\" alt=\"截图\"></p>\n<h3 id=\"IdentityHashMap-内部的方法\"><a href=\"#IdentityHashMap-内部的方法\" class=\"headerlink\" title=\"IdentityHashMap 内部的方法\"></a><strong>IdentityHashMap 内部的方法</strong></h3><p><img src=\"/image/java-WeakHashMap/map02.png\" alt=\"截图\"></p>\n<h3 id=\"成员变量\"><a href=\"#成员变量\" class=\"headerlink\" title=\"成员变量\"></a>成员变量</h3><p>/**</p>\n<ul>\n<li>默认初始容量<br>*/<br>private static final int DEFAULT_INITIAL_CAPACITY = 16;</li>\n</ul>\n<p>/**</p>\n<ul>\n<li>最大容量<br>*/<br>private static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</li>\n</ul>\n<p>/**</p>\n<ul>\n<li>默认加载因子 0.75<br>*/<br>private static final float DEFAULT_LOAD_FACTOR = 0.75f;</li>\n</ul>\n<p>/**</p>\n<ul>\n<li>元素数组<br>*/<br>Entry&lt;K,V&gt;[] table;</li>\n</ul>\n<p>/**</p>\n<ul>\n<li>元素个数<br>*/<br>private int size;</li>\n</ul>\n<p>/**</p>\n<ul>\n<li>*/<br>private int threshold;</li>\n</ul>\n<p>/**</p>\n<ul>\n<li>*/<br>private final float loadFactor;</li>\n</ul>\n<p>/**</p>\n<ul>\n<li>引用队列,用于清除<br>*/<br>private final ReferenceQueue<object> queue = new ReferenceQueue&lt;&gt;();</object></li>\n</ul>\n<p>/**</p>\n<ul>\n<li>修改计数<br>*/<br>int modCount;</li>\n</ul>\n<h3 id=\"put方法\"><a href=\"#put方法\" class=\"headerlink\" title=\"put方法\"></a>put方法</h3>","site":{"data":{}},"excerpt":"<blockquote class=\"blockquote-center\"><p>本篇文章主要浅析WeakHashMap的使用、适用场景和内部实现原理。</p>\n</blockquote>","more":"<h3 id=\"IdentityHashMap-继承类与实现接口\"><a href=\"#IdentityHashMap-继承类与实现接口\" class=\"headerlink\" title=\"IdentityHashMap 继承类与实现接口\"></a><strong>IdentityHashMap 继承类与实现接口</strong></h3><p><img src=\"/image/java-WeakHashMap/map01.png\" alt=\"截图\"></p>\n<h3 id=\"IdentityHashMap-内部的方法\"><a href=\"#IdentityHashMap-内部的方法\" class=\"headerlink\" title=\"IdentityHashMap 内部的方法\"></a><strong>IdentityHashMap 内部的方法</strong></h3><p><img src=\"/image/java-WeakHashMap/map02.png\" alt=\"截图\"></p>\n<h3 id=\"成员变量\"><a href=\"#成员变量\" class=\"headerlink\" title=\"成员变量\"></a>成员变量</h3><p>/**</p>\n<ul>\n<li>默认初始容量<br>*/<br>private static final int DEFAULT_INITIAL_CAPACITY = 16;</li>\n</ul>\n<p>/**</p>\n<ul>\n<li>最大容量<br>*/<br>private static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</li>\n</ul>\n<p>/**</p>\n<ul>\n<li>默认加载因子 0.75<br>*/<br>private static final float DEFAULT_LOAD_FACTOR = 0.75f;</li>\n</ul>\n<p>/**</p>\n<ul>\n<li>元素数组<br>*/<br>Entry&lt;K,V&gt;[] table;</li>\n</ul>\n<p>/**</p>\n<ul>\n<li>元素个数<br>*/<br>private int size;</li>\n</ul>\n<p>/**</p>\n<ul>\n<li>*/<br>private int threshold;</li>\n</ul>\n<p>/**</p>\n<ul>\n<li>*/<br>private final float loadFactor;</li>\n</ul>\n<p>/**</p>\n<ul>\n<li>引用队列,用于清除<br>*/<br>private final ReferenceQueue<object> queue = new ReferenceQueue&lt;&gt;();</object></li>\n</ul>\n<p>/**</p>\n<ul>\n<li>修改计数<br>*/<br>int modCount;</li>\n</ul>\n<h3 id=\"put方法\"><a href=\"#put方法\" class=\"headerlink\" title=\"put方法\"></a>put方法</h3>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjgt7pa2u0008lctyw3tnymin","category_id":"cjgt7pa2r0004lctycetcw6ws","_id":"cjgt7pa2y000dlctyc2pv6xp4"},{"post_id":"cjgt7pa2l0001lctypxvzdvnd","category_id":"cjgt7pa2r0004lctycetcw6ws","_id":"cjgt7pa30000hlcty50u2bt0v"},{"post_id":"cjgt7pa2p0003lcty79qma421","category_id":"cjgt7pa2r0004lctycetcw6ws","_id":"cjgt7pa30000ilctyq63ns3jb"},{"post_id":"cjgt7pa2t0007lctyyhupehl6","category_id":"cjgt7pa2r0004lctycetcw6ws","_id":"cjgt7pa31000klctyu97s48zq"}],"PostTag":[{"post_id":"cjgt7pa2u0008lctyw3tnymin","tag_id":"cjgt7pa2s0005lctyraw66dce","_id":"cjgt7pa2x000blcty5d5x799p"},{"post_id":"cjgt7pa2l0001lctypxvzdvnd","tag_id":"cjgt7pa2s0005lctyraw66dce","_id":"cjgt7pa2y000clcty98m0k7oy"},{"post_id":"cjgt7pa2p0003lcty79qma421","tag_id":"cjgt7pa2s0005lctyraw66dce","_id":"cjgt7pa30000glctyeyww9f98"},{"post_id":"cjgt7pa2t0007lctyyhupehl6","tag_id":"cjgt7pa2s0005lctyraw66dce","_id":"cjgt7pa30000jlcty85zdhm7j"}],"Tag":[{"name":"java","_id":"cjgt7pa2s0005lctyraw66dce"}]}}